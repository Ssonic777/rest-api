openapi: 3.0.0
info:
  title: Blockster API
  version: 1.0.0
  description: Blockster API OpenApi description
  contact:
    email: akovalenko@blockster.com
  x-logo:
    url: 'https://www.cryptocompare.com/media/38553091/unnamed.jpg'
    altText: Petstore logo
servers:
  - url: 'https://api-dev.blockster.com/v1/'
    description: Blockster dev API server
  - url: 'http://127.0.0.1:8082/v1/'
    description: Local API Server
paths:
  /header_data:
    get:
      description: Header Data
      tags:
        - Header
      parameters:
        - name: X-OS
          in: header
          required: true
          schema:
            type: string
            enum:
              - "Android"
              - "IOS"
        - name: X-OS-VERSION
          in: header
          required: true
          schema:
            type: string
            enum:
              - "10"
              - "11"
              - "12"
        - name: X-APP-VERSION
          in: header
          required: true
          schema:
            type: string
            enum:
              - "1.0"
              - "1.1"
              - "1.5"
        - name: X-DEVICE-ID
          in: header
          required: true
          schema:
            type: string
            example: "KV1QiLCJhbGciOi"
      responses:
        202:
          description: Show result
          content:
            application/json:
              schema:
                type: object
                properties:
                  x-os:
                    type: string
                    enum:
                      - "Android"
                      - "IOS"
                  x-os-version:
                    type: string
                    enum:
                      - "10"
                      - "11"
                      - "12"
                  x-app-versions:
                    type: string
                    enum:
                      - "1.0"
                      - "1.1"
                      - "1.5"
                  x-device-id:
                    type: string
                    example: "KV1QiLCJhbGciOi"
  '/search':
    get:
      description: Search
      tags:
        - Search
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum:
              - users
          required: false
          example: users
        - in: query
          name: username
          schema:
            type: string
          required: false
          example: user_name

        - in: query
          name: first_name
          schema:
            type: string
          required: false
          example: User

        - in: query
          name: last_name
          schema:
            type: string
          required: false
          example: Userov

        - in: query
          name: admin
          schema:
            type: string
            enum:
              - '0'
              - '1'
              - '2'
          required: false
          example: 1

        - in: query
          name: email
          schema:
            type: string
          required: false
          example: email@example.com

        - in: query
          name: user_id
          schema:
            type: integer
            format: int32
          required: false
          example: 123
      responses:
        '200':
          description: Search by query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'
              example:
                $ref: '#/components/examples/UserExample/value'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - BearerAuth: [ ]
  '/auth/register':
    post:
      summary: Register
      tags:
        - Authorization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: 'Alex'
                last_name:
                  type: string
                  example: 'Pavlov'
                email:
                  type: string
                  example: 'lorem@ipsum.dolor'
                password:
                  type: string
                  example: '12345Secret_'
                country_iso:
                  type: string
                  example: 'US'

      responses:
        '400':
          description: validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad request"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/AuthSuccessResponse'

  '/auth/login':
    post:
      summary: Login
      tags:
        - Authorization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - device_id
              properties:
                email:
                  type: string
                  example: "some@gmail.com"
                  required: true
                password:
                  type: string
                  example: "12345Secret_"
                  required: true
                device_id:
                  type: string
                  example: "KV1QiLCJhbGciOi"
      responses:
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: integer
                    example: 1001
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/AuthSuccessResponse'

  '/auth/active/email':
    post:
      summary: Send active email code
      tags:
        - Authorization Active
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            example: "foo@bar.baz"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '202':
          $ref: '#/components/responses/UserIsAlreadyActiveResponse'
        '200':
          description: "User is not yet active. Email with OTP was sent"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification email was successfully sent"
                  status:
                    type: number
                    example: 200
      description: Get OTP by email

#  /auth/check/email:
#    get:
#      summary: Check email
#      tags:
#        - Authorization Check Email
#      requestBody:
#        content:
#          application/json:
#            schema:
#              type: object
#              required:
#                - email
#              properties:
#                email:
#                  type: string
#                  example: foo@bar.baz
#
#      responses:
#        '400':
#          $ref: '#/components/responses/BadRequestErrorResponse'
#        '401':
#          $ref: '#/components/responses/UnauthorizedErrorResponse'
#        '403':
#          $ref: '#/components/responses/ForbiddenErrorResponse'
#        '404':
#          $ref: '#/components/responses/NotFoundErrorResponse'
#        '405':
#          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
#        '500':
#          $ref: '#/components/responses/InternalServerErrorResponse'
#        '200':
#          $ref: '#/components/responses/CheckEmailResponse'

  /auth/check/email_code:
    post:
      summary: Check email code
      tags:
        - Authorization Check Email
        - Authorization Reset Password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email_code
                - email
              properties:
                email_code:
                  type: string
                  example: 123321
                email:
                  type: string
                  example: foo@bar.baz
      responses:
        '400':
          description: Baad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad request"
                  message:
                    type: string
                    example: "Wrong email_code param"
                  error_code:
                    type: integer
                    example: -1400
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email code is valid"
      description: Submit reset password from email

  /auth/active/activate:
    put:
      summary: Account activate
      tags:
        - Authorization Active
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - opt_code
                - device_id
              properties:
                email:
                  type: string
                  example: "user@gmail.com"
                opt_code:
                  type: integer
                  example: 494656
                device_id:
                  type: string
                  example: "KV1QiLCJhbGciOi"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '202':
          $ref: '#/components/responses/UserIsAlreadyActiveResponse'
        '200':
          $ref: '#/components/responses/AuthSuccessResponse'

  /auth/restore_password/restore:
    post:
      summary: Send Reset Password Code
      tags:
        - Authorization Reset Password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: foo@bar.baz
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '202':
          description: Sent message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password change request was sent"
      description: Generate reset password email

    put:
      summary: Store new password
      tags:
        - Authorization Reset Password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email_code
                - password
                - device_id
              properties:
                email_code:
                  type: integer
                  example: 123321
                password:
                  type: string
                  example: "new12345Password!"
                device_id:
                  type: string
                  example: "KV1QiLCJhbGciOi"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/AuthSuccessResponse'
      description: Store reset password from email

  /auth/logout:
    post:
      summary: Logout User
      tags:
        - Authorization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - device_id
              properties:
                device_id:
                  type: string
                  example: "KV1QiLCJhbGciOi"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Logout User
          content:
            application/json:
              schema:
                type: object
                required: message
                properties:
                  message:
                    type: string
                    example: "Successfully logged out"

  /auth/refresh:
    post:
      summary: Refresh Token
      tags:
        - Authorization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
                - device_id
              properties:
                refresh_token:
                  type: string
                  example: "ef5c821993cfbee0621ddb39dfb521d1fefdaae5"
                device_id:
                  type: string
                  example: "KV1QiLCJhbGciOi"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/AuthSuccessResponse'
      description: Refresh current auth token

  /auth/socials/google:
    post:
      summary: Google Authorization
      tags:
        - Social Authorization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - device_id
                - token
              properties:
                device_id:
                  type: string
                  example: "KV1QiLCJhbGciOi"
                token:
                  type: string
                  example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wvMTI3LjAuMC4xOjgwODJcL3YxXC9hdXRoXC9zb2NpYWxzXC9nb29nbGUiLCJpYXQiOjE2NDI3ODMwNDYsImV4cCI6MTY0Mjc4Mzk0NiwibmJmIjoxNjQyNzgzMDQ2LCJqdGkiOiJoUnFGcXpUSEdaMUM0aU9rIiwic3ViIjoyOSwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.5v05ms2ug4z-X7osvCBRNmJ9tENj6k4zKwsu1PDzaIo"
      responses:
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad request"
                  message:
                    type: string
                    example: "Invalid google token"
                  error_code:
                    type: integer
                    example: -1400
        200:
          $ref: '#/components/responses/AuthSuccessResponse'

  /auth/socials/apple:
    post:
      description: Apple Authorization
      tags:
        - Social Authorization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - device_id
                - token
                - authorization_code
              properties:
                device_id:
                  type: string
                  example: "KV1QiLCJhbGciOi"
                token:
                  type: string
                  example: "eyJraWQiOiJlWGF1bm1MIiwiYWxnIjoiUlMyNTYifQ.eyJpc3MiOiJodHRwczovL2FwcGxlaWQuYXBwbGUuY29tIiwiYXVkIjoiY29tLmJsb2Nrc3Rlci5kZXYiLCJleHAiOjE2NDE5OTg3NjIsImlhdCI6MTY0MTkxMjM2Miwic3ViIjoiMDAwMjM1LjkwZDZlYTdkZjQ0OTQ3NzlhMGFhYzBkOGQ0ODkwMGM2LjE0NDYiLCJjX2hhc2giOiI2WkZUelFvVzEzcDZxcW1vQzY5ZWNBIiwiZW1haWwiOiJkNXNuMm1wcnFoQHByaXZhdGVyZWxheS5hcHBsZWlkLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImlzX3ByaXZhdGVfZW1haWwiOiJ0cnVlIiwiYXV0aF90aW1lIjoxNjQxOTEyMzYyLCJub25jZV9zdXBwb3J0ZWQiOnRydWUsInJlYWxfdXNlcl9zdGF0dXMiOjJ9.wjNDmhH1IX4rF4_ZizRkfbA3fl-hXFVwQ2fTbeCAgg23ltaZeMQPG5kTV2Og8mOl6PncOPg1AWUpTeFEMqQs_ksH1ZxN7rddVtuMUTzptyjmYx-BrtewB_rxLK-Kx0HrWyl02IG8dbnrysFA436rh7EUl2WcwoRypLkIUhdyT1SF9uCb1ZUz1UnQYfiYgBuCMB3NmOycAj1fKbvoplB9do9tLzz-p9pX_nqoV1FkIKfmczmitwUdAZCw7qDAiBd3QU2yKfOqSPlsQ9U9gTXwU_oOQ3ncgCkmcUIbVn-QZwM0EqXbABWsJcxvr-4okwz"
                authorization_code:
                  type: string
                  example: "WAAWD89663c3fa4887817298816e6aawdawd8.0.sstv.awd9aw06rG1yDB5K16Pawd8"
                user_id:
                  type: string
                  example: "awodhau897ad.awd0u8a"
                  description: "`Warning` These property must be saved in local device! Delete this property after get success status from server!"
                email:
                  type: string
                  example: "original@mail.com"
                  description: "`Warning` These property must be saved in local device! Delete this property after get success status from server!"
                first_name:
                  type: string
                  example: "Petya"
                  description: "`Warning` These property must be saved in local device! Delete this property after get success status from server!"
                  default: "Unknown"
                last_name:
                  type: string
                  example: "Petrov"
                  description: "`Warning` These property must be saved in local device! Delete this property after get success status from server!"
                  default: "Unknown"
      responses:
        400:
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad request"
                  message:
                    type: string
                    example: "Invalid apple token"
                  error_code:
                    type: integer
                    example: -1400
        200:
          $ref: '#/components/responses/AuthSuccessResponse'

  /users/me:
    get:
      summary: Get Me
      tags:
        - Users Me
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/UserMeResponse'
      security:
        - BearerAuth: [ ]
    put:
      summary: Me data update
      tags:
        - Users Me
      requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  first_name:
                    type: string
                    example: "Alex"
                  last_name:
                    type: string
                    example: "Petrov"
                  email:
                    type: string
                    uniqueItems: true
                    example: "alex@gmail.com"
                  username:
                    type: string
                    uniqueItems: true
                    example: "username"
                  gender:
                    type: string
                    example: "male"
                    enum:
                      - "male"
                      - "female"
                      - "other"
                  about:
                    type: string
                    example: "It is About text It is About text It is About text It is About text"
                    nullable: true
                  phone_number:
                    type: string
                    example: "+38095123456789"
                    nullable: true
                  birthday:
                    type: string
                    example: "2000-12-31"
                    nullable: true
                  country_id:
                    type: integer
                    example: 219
                    nullable: true
                  avatar:
                    type: string
                    example: 'file_e2c517f2585c025c51dc06fd1c7329d3'
                    nullable: true
                  cover:
                    type: string
                    example: 'file_e2c517f2585c025c51dc06fd1c7329d3'
                    nullable: true
      responses:
        '400':
          description: "Bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad request"
                  message:
                    type: string
                    example: "avatar and cover mustn't be equals"
                  error_code:
                    type: integer
                    example: -1400
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '202':
          $ref: '#/components/responses/UserMeUpdateResponse'
      security:
        - BearerAuth: [ ]

  /users/me/privacy:
    get:
      summary: Get Me Privacy
      tags:
        - Users Me
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/UserMePrivacyResponse'
      security:
        - BearerAuth: [ ]
    put:
      summary: Me Privacy data update
      tags:
        - Users Me
      parameters:
        - name: follow_privacy
          in: query
          required: true
          schema:
            type: string
            example: everyone
            nullable: false
            enum:
              - everyone
              - ifollow
        - name: message_privacy
          in: query
          required: true
          schema:
            type: string
            example: ifollow
            nullable: false
            enum:
              - everyone
              - ifollow
              - nobody
        - name: friend_privacy
          in: query
          required: true
          schema:
            type: string
            example: followme
            nullable: false
            enum:
              - everyone
              - ifollow
              - nobody
              - followme
        - name: post_privacy
          in: query
          required: true
          schema:
            type: string
            example: nobody
            nullable: false
            enum:
              - everyone
              - ifollow
              - nobody
        - name: confirm_followers
          in: query
          required: true
          schema:
            type: string
            example: no
            nullable: false
            enum:
              - no
              - yes
        - name: group_chat_privacy
          in: query
          required: true
          schema:
            type: string
            example: no
            nullable: false
            enum:
              - no
              - yes
        - name: show_activities_privacy
          in: query
          required: true
          schema:
            type: string
            example: no
            nullable: false
            enum:
              - no
              - yes
        - name: status
          in: query
          required: true
          schema:
            type: string
            example: offline
            nullable: false
            enum:
              - offline
              - online
        - name: share_my_location
          in: query
          required: true
          schema:
            type: string
            example: no
            nullable: false
            enum:
              - no
              - yes
        - name: share_my_data
          in: query
          required: true
          schema:
            type: string
            example: no
            nullable: false
            enum:
              - no
              - yes
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '202':
          $ref: '#/components/responses/UserMeUpdateResponse'
      security:
        - BearerAuth: [ ]

  '/users/{user_id}/followers':
    get:
      summary: Get Followers Users
      tags:
        - Follow
      parameters:
        - in: path
          name: user_id
          example: 12
          required: true
          schema:
            type: integer
            example: 12
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
            default: 15
        - name: cursor_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/FollowersCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

  '/users/followers':
    get:
      summary: Get My Followers
      tags:
        - Follow
      parameters:
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
            default: 15
        - name: cursor_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/FollowersCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

  '/users/{user_id}/followers/search':
    get:
      summary: Get Followers Users Search
      tags:
        - Follow
      parameters:
        - in: path
          name: user_id
          example: 12
          required: true
          schema:
            type: integer
            example: 12
        - in: path
          name: search
          example: Johns
          required: true
          schema:
            type: string
            example: Johns
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
            default: 15
        - name: cursor_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/FollowSearchCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

  '/users/{user_id}/followings':
    get:
      summary: Get Followings Users
      tags:
        - Follow
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            example: 12
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
            default: 15
        - name: cursor_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/FollowedCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

  '/users/followings':
    get:
      summary: Get My Followings
      tags:
        - Follow
      parameters:
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
            default: 15
        - name: cursor_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/FollowedCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

  '/users/{user_id}/followings/search':
    get:
      summary: Get Followings Users Search
      tags:
        - Follow
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            example: 12
        - in: path
          name: search
          example: Johns
          required: true
          schema:
            type: string
            example: Johns
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
            default: 25
        - name: cursor_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/FollowSearchCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

  '/users/following-requests':
    get:
      summary: Get list of requests to follow
      tags:
        - Follow
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/FollowingRequestsCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

  '/users/follow/discover':
    get:
      summary: Get list of users to follow
      tags:
        - Follow
      parameters:
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            default: 15
            example: 10
      responses:
          $ref: '#/components/responses/UsersFollowDiscoverResponse'
      security:
        - BearerAuth: [ ]

  '/users/{user_id}':
    description: Get User Info
    get:
      summary: Show User
      tags:
        - Users
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            example: 12
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/UserModelResponse'
      security:
        - BearerAuth: [ ]
    patch:
      summary: Update User
      tags:
        - Users
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            example: 12
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/UserModelResponse'
      security:
        - BearerAuth: [ ]
    delete:
      summary: Delete User
      tags:
        - Users
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
            example: 12
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/OperationSuccessfulResponse'
      security:
        - BearerAuth: [ ]

  '/messages':
    get:
      description: Get User Chat List
      tags:
        - Messages
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Messages Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesResponse'
      security:
        - BearerAuth: [ ]

    post:
      description: Create Message
      tags:
        - Messages
      parameters:
        - name: to_id
          in: query
          required: true
          schema:
            type: integer
            example: 2

        - name: text
          in: header
          required: false
          schema:
            type: string
            example: This is examlpe message

        - name: media
          in: header
          required: false
          description: Uploaded File
          schema:
            type: object
            example: Should be uploaded file

      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Messages Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesCreatedResponse'
      security:
        - BearerAuth: [ ]

  '/messages/{with_user_id}':
    get:
      description: Get Messages with user_id
      tags:
        - Messages
      parameters:
        - name: with_user_id
          in: path
          required: true
          schema:
            type: integer
            example: 2

      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Messages Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesResponse'
      security:
        - BearerAuth: [ ]


  '/groups':
    description: Groups
    get:
      summary: Get Groups
      tags:
        - Groups
      parameters:
        - name: tab
          in: query
          required: false
          schema:
            type: string
            example: 'my'
            enum:
              - 'my'
              - 'suggested'
              - 'joined'
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            example: eyJpZCI6MzIyLCJfcG9pbnRzVG9OZXh0SXRlbXMiOnRydWV9
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: after
          in: query
          required: false
          schema:
            type: string
            example: 1155
        - name: before
          in: query
          required: false
          schema:
            type: string
            example: 1166
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/GroupsCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

    post:
      summary: Create Group
      tags:
        - Groups
      parameters:
        - name: group_title
          in: query
          required: true
          schema:
            type: string
            example: "It is group title Test"

        - name: group_slug
          in: query
          required: true
          description: "This parameter must be unique"
          schema:
            type: string
            example: "group-slug_link"

        - name: about
          in: query
          required: false
          schema:
            type: string
            example: "It is About Text It is About Text It is About Text It is About Text"

        - name: category
          in: query
          required: true
          schema:
            type: integer
            example: 10

        - name: privacy
          in: query
          required: false
          schema:
            type: boolean
            example: true

      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Created Group Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResource'
      security:
        - BearerAuth: [ ]

  '/groups/{group_id}':
    get:
      summary: Show Group
      tags:
        - Groups
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Created Group Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupWithSettingsPermissionsResource'
      security:
        - BearerAuth: [ ]

    put:
      summary: Update Group
      tags:
        - Groups
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 53
        - name: group_title
          in: query
          required: false
          schema:
            type: string
            example: "It is group title Test Updated"
        - name: group_slug
          in: query
          required: false
          description: "This parameter must be unique"
          schema:
            type: string
            example: "It is group name Updated"
        - name: abaut
          in: query
          required: false
          schema:
            type: string
            example: "It is About Text It is About Text It is About Text It is About Text Updatd"
        - name: category
          in: query
          required: false
          schema:
            type: integer
            example: 10
        - name: privacy
          in: query
          required: false
          schema:
            type: boolean
            example: true
        - name: join_privacy
          in: query
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Created Group Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResource'
      security:
        - BearerAuth: [ ]

    delete:
      summary: Delete Group
      tags:
        - Groups
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '204':
          description: No Content
      security:
        - BearerAuth: [ ]

  '/group/{group_id}/joins':
    post:
      summary: Group Join
      tags:
        - Group Join
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 55
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You don't have enough rights"
                    enum:
                      - "You don't have enough rights"
                      - "You will not be able to leave the group as you are the creator of this group"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Join Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "joined"
                    enum:
                      - "joined"
                      - "requested"
                      - "left"
      security:
        - BearerAuth: [ ]

  '/group/{group_id}/settings':
    description: Group Settings
    get:
      summary: Show Group Setting
      tags:
        - Group Settings
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 5
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Show Group Settings Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupAdditionalDataResource'
      security:
        - BearerAuth: [ ]

    put:
      summary: Update Group Settings
      tags:
        - Group Settings
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 52
        - name: phone
          in: query
          required: false
          schema:
            type: string
            example: "+380951234567"
        - name: email
          in: query
          required: false
          schema:
            type: string
            example: "test@gmail.com"
        - name: website
          in: query
          required: false
          schema:
            type: string
            example: "https://jsonformatter.org/"
        - name: location
          in: query
          required: false
          schema:
            type: string
            example: "Ukrainstan"
        - name: facebook
          in: query
          required: false
          schema:
            type: string
            example: "https://facebook.com/facebook"
        - name: instagram
          in: query
          required: false
          schema:
            type: string
            example: "https://instagram.com/instagram"
        - name: twitter
          in: query
          required: false
          schema:
            type: string
            example: "https://twitter.com/twitter"
        - name: vkontakte
          in: query
          required: false
          schema:
            type: string
            example: "https://vk.com/vkontakte"
        - name: youtube
          in: query
          required: false
          schema:
            type: string
            example: "https://youtube.com/youtube"
        - name: linkedin
          in: query
          required: false
          schema:
            type: string
            example: "https://linkedin.com/linkedin"

      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Updated Group Settings Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupAdditionalDataResource'
      security:
        - BearerAuth: [ ]

  /group/search:
    description: Search Groups
    get:
      summary: Search Groups
      tags:
        - Groups
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
            example: 'test group'
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            example: NUb05leHRJdGVtcyI6dHJ1ZX0eyJpZCI6MTAsIl9wb2ludH
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: after
          in: query
          required: false
          schema:
            type: string
            example: 1155
        - name: before
          in: query
          required: false
          schema:
            type: string
            example: 1166
      responses:
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/GroupsSearchCursorPaginationResponse'
      security:
        - BearerAuth: [ ]


  /group/{group_id}/requests:
    get:
      summary: Get Requested Group member
      tags:
        - Group Member Requests
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 1810
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 30
        - name: before
          in: query
          required: false
          schema:
            type: integer
            example: 84
        - name: after
          in: query
          required: false
          schema:
            type: integer
            example: 56
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/GroupMemberRequestResponse'
      security:
        - BearerAuth: [ ]

  /group/{group_id}/requests/{user_id}:
    post:
      summary: Requset member action
      tags:
        - Group Member Requests
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 1810
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1733
        - name: request
          in: query
          required: true
          schema:
            type: string
            example: "accept"
            enum:
              - "accept"
              - "decline"
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/GroupMemberRequestActionResponse'
      security:
        - BearerAuth: [ ]

  '/user/groups/{user_id}':
    get:
      summary: Get User Created Groups by user id
      tags:
        - Groups
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
            example: 1727
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            example: NUb05leHRJdGVtcyI6dHJ1ZX0eyJpZCI6MTAsIl9wb2ludH
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: after
          in: query
          required: false
          schema:
            type: string
            example: 1155
        - name: before
          in: query
          required: false
          schema:
            type: string
            example: 1166
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/UserCreatedGroupCursorPaginateResponse'
      security:
        - BearerAuth: [ ]

  /group/{group_id}/admins:
    description: Group Admins
    get:
      summary: Get Group Admins
      tags:
        - Group Admins
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 68
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            example: NUb05leHRJdGVtcyI6dHJ1ZX0eyJpZCI6MTAsIl9wb2ludH
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: after
          in: query
          required: false
          schema:
            type: string
            example: 1155
        - name: before
          in: query
          required: false
          schema:
            type: string
            example: 1166
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/GroupAdminCursorPaginateSchema'
      security:
        - BearerAuth: [ ]
    post:
      summary: Greate Group Admin
      tags:
        - Group Admins
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 68
        - name: user_id
          in: query
          required: true
          schema:
            type: integer
            example: 1
        - name: general
          in: query
          required: false
          schema:
            type: boolean
            example: false
        - name: privacy
          in: query
          required: false
          schema:
            type: boolean
            example: true
        - name: avatar
          in: query
          required: false
          schema:
            type: boolean
            example: true
        - name: members
          in: query
          required: false
          schema:
            type: boolean
            example: true
        - name: analytics
          in: query
          required: false
          schema:
            type: boolean
            example: false
        - name: delete_group
          in: query
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/GroupAdminResponse'
      security:
        - BearerAuth: [ ]

  '/group/{group_id}/admins/{user_id}':
    description: Groups Admin Manipulation
    get:
      summary: Show Group Admin
      tags:
        - Group Admins
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 59
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/GroupAdminPermissionResponse'
      security:
        - BearerAuth: [ ]

    put:
      summary: Update Group Admin
      tags:
        - Group Admins
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 68
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - name: general
          in: query
          required: false
          schema:
            type: boolean
            example: false
        - name: privacy
          in: query
          required: false
          schema:
            type: boolean
            example: true
        - name: avatar
          in: query
          required: false
          schema:
            type: boolean
            example: true
        - name: members
          in: query
          required: false
          schema:
            type: boolean
            example: true
        - name: analytics
          in: query
          required: false
          schema:
            type: boolean
            example: false
        - name: delete_group
          in: query
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/GroupAdminResponse'
      security:
        - BearerAuth: [ ]

    delete:
      summary: Delete Group Admin
      tags:
        - Group Admins
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 68
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '204':
          description: Admin Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 2
      security:
        - BearerAuth: [ ]

  '/group/{group_id}/posts':
    post:
      summary: Group Create Post
      tags:
        - Group Posts
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 23
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                post_text:
                  type: string
                  example: "This is post text"
                active:
                  type: boolean
                  example: 1
                post_privacy:
                  type: integer
                  description: "`0 - everyone` `1 - people I follow` `2 - people follow me` `3 - only me`"
                  enum:
                    - 0
                    - 1
                    - 2
                    - 3
                attachments:
                  type: array
                  items:
                    type: string
                    example: "file_e2c517f2585c025c51dc06fd1c7329d3"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostResponse'
      security:
        - BearerAuth: [ ]

  '/group/{group_id}/posts/{post_id}':
    get:
      summary: Show Grpup Post
      tags:
        - Group Posts
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 70
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            example: 333
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostResponse'
      security:
        - BearerAuth: [ ]

    put:
      summary: Update Group Post
      tags:
        - Group Posts
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 514
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            example: 70

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                post_text:
                  type: string
                  example: "This is post text update"
                active:
                  type: boolean
                  example: 0
                  enum:
                    - 1
                    - 0
                post_privacy:
                  type: integer
                  description: "`0 - everyone` `1 - people I follow` `2 - people follow me` `3 - only me`"
                  enum:
                    - 0
                    - 1
                    - 2
                    - 3
                attachments:
                  type: array
                  items:
                    type: string
                    example: "file_e2c517f2585c025c51dc06fd1c7329d3"
                    description: "Working only photos"

      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostResponse'
      security:
        - BearerAuth: [ ]

    delete:
      summary: Delete Group Post
      tags:
        - Group Posts
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 70
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            example: 333
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '204':
          $ref: '#/components/responses/NoContentResponse'
      security:
        - BearerAuth: [ ]

  '/group/suggestions':
    get:
      description: Get All Groups
      tags:
        - Group Suggestions
      parameters:
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            example: NUb05leHRJdGVtcyI6dHJ1ZX0eyJpZCI6MTAsIl9wb2ludH
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: after
          in: query
          required: false
          schema:
            type: string
            example: 1155
        - name: before
          in: query
          required: false
          schema:
            type: string
            example: 1166
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/GroupsSuggestionsCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

  '/group/joined/{user_id}':
    description: Get joined groups for User
    get:
      summary: Get joined groups for User
      tags:
        - Group Join
      parameters:
        - name: user_id
          in: path
          required: false
          schema:
            type: integer
            example: 5
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            example: NUb05leHRJdGVtcyI6dHJ1ZX0eyJpZCI6MTAsIl9wb2ludH
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: after
          in: query
          required: false
          schema:
            type: string
            example: 1155
        - name: before
          in: query
          required: false
          schema:
            type: string
            example: 1166
        - name: joined_type
          in: query
          required: false
          schema:
            type: string
            example: "joined"
            enum:
              - "joined"
              - "requested"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/GroupsJoinedCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

  '/group/{group_id}/invite':
    post:
      summary: Group inivate Friends
      tags:
        - Group Inivate
#      parameters:
#        - name: group_id
#          in: path
#          required: true
#          schema:
#            type: integer
#            example: 1737
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                friends:
                  type: array
                  example:
                    - 1
                    - 2
                    - 3

      responses:
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad request"
                  message:
                    type: string
                    example: "You are not a member of this group"
                  error_code:
                    type: integer
                    example: -1100
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '202':
          description: Accepted
      security:
        - BearerAuth: [ ]

  # '/group/messages':
  #   get:
  #     description: Get Group Chat list
  #     tags:
  #       - Group Messages
  #     summary: Get Group Chat list
  #       - Groups
  #       - Group Admins
  #     parameters:
  #       - name: group_id
  #         in: path
  #         required: true
  #         schema:
  #           type: integer
  #           example: 68
  #       - name: admin_id
  #         in: query
  #         required: true
  #         schema:
  #           type: integer
  #           example: 1
  #       - name: general
  #         in: query
  #         required: false
  #         schema:
  #           type: boolean
  #           example: false
  #       - name: privacy
  #         in: query
  #         required: false
  #         schema:
  #           type: boolean
  #           example: true
  #       - name: avatar
  #         in: query
  #         required: false
  #         schema:
  #           type: boolean
  #           example: true
  #       - name: members
  #         in: query
  #         required: false
  #         schema:
  #           type: boolean
  #           example: true
  #       - name: analytics
  #         in: query
  #         required: false
  #         schema:
  #           type: boolean
  #           example: false
  #       - name: delete_group
  #         in: query
  #         required: false
  #         schema:
  #           type: boolean
  #           example: true
  #     responses:
  #       '400':
  #         description: Bad request
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example:
  #                 message: "You don't have enough rights"
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedErrorResponse'
  #       '403':
  #         $ref: '#/components/responses/ForbiddenErrorResponse'
  #       '404':
  #         $ref: '#/components/responses/NotFoundErrorResponse'
  #       '405':
  #         $ref: '#/components/responses/MethodNotAllowedHttpResponse'
  #       '500':
  #         $ref: '#/components/responses/InternalServerErrorResponse'
  #       '200':
  #         description: Messages Response
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/GroupChatList'
  #   post:
  #     summary: Create Group Chat Message
  #     tags:
  #       - Group Messages
  #     requestBody:
  #       content:
  #         multipart/form-data:
  #           schema:
  #             type: object
  #             properties:
  #               group_id:
  #                 type: integer
  #                 example: 53

  #               text:
  #                 type: string
  #                 example: This is example message

  #               media:
  #                 type: string
  #                 format: binary

  #     responses:
  #       '400':
  #         description: Bad request
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               example:
  #                 message: "You don't have enough rights"
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedErrorResponse'
  #       '403':
  #         $ref: '#/components/responses/ForbiddenErrorResponse'
  #       '404':
  #         $ref: '#/components/responses/NotFoundErrorResponse'
  #       '405':
  #         $ref: '#/components/responses/MethodNotAllowedHttpResponse'
  #       '500':
  #         $ref: '#/components/responses/InternalServerErrorResponse'
  #       '201':
  #         description: Messages Response
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/GroupChatMessage'

  '/group/messages/{group_id}':
    get:
      summary: Get Group Chat Messages
      tags:
        - Group Messages
      parameters:
        - name: group_id
          in: path
          required: true
          example: 53
          schema:
            type: integer

      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Messages Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: [ ]

  '/group/messages/{group_message_id}':
    post:
      summary: Update Group Chat
      tags:
        - Group Messages
      parameters:
        - name: group_message_id
          in: path
          required: true
          example: 484
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                group_message_id:
                  type: integer
                  example: 390

                text:
                  type: string
                  example: This is examplate text

                media:
                  type: string
                  format: binary

                _method:
                  type: string
                  example: PUT

      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Messages Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupChatMessage'
      security:
        - BearerAuth: [ ]

    delete:
      summary: Delete group message
      tags:
        - Group Messages
      parameters:
        - name: group_message_id
          in: path
          required: true
          example: 484
          schema:
            type: integer

      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '204':
          description: Not content
      security:
        - BearerAuth: [ ]

  '/group/categories':
    description: Group Categories
    get:
      summary: Get Group Categories list
      tags:
        - Group Categories
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/GroupCategoriesListResourceResponse'
      security:
        - BearerAuth: [ ]

  '/group/{group_id}/members':
    get:
      summary: Get Group Members
      tags:
        - Group Members
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
            example: 1738
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            example: NUb05leHRJdGVtcyI6dHJ1ZX0eyJpZCI6MTAsIl9wb2ludH
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: after
          in: query
          required: false
          schema:
            type: string
            example: 1155
        - name: before
          in: query
          required: false
          schema:
            type: string
            example: 1166
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/GroupMemberCursorPaginateResponse'
      security:
        - BearerAuth: [ ]

  /group/{grou_id}/medias:
    post:
      summary: Update Avatar && Cover Group
      tags:
        - Group Medias
      parameters:
        - name: grou_id
          in: path
          required: true
          schema:
            type: integer
            example: 5
        - name: avatar
          in: query
          required: false
          schema:
            type: string
            format: binary
            example: avatar.jpg
            enum:
              - ".jpeg"
              - ".jpg"
              - ".png"
        - name: cover
          in: query
          required: false
          schema:
            type: string
            format: binary
            example: cover.jpg
            enum:
              - ".jpeg"
              - ".jpg"
              - ".png"
        - name: _method
          in: query
          required: true
          schema:
            type: string
            example: "PUT"
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Response update group avatar && cover
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatar:
                    type: string
                    example: "http://127.0.0.1:8082/group/cover/bwNUUYUK7vpW2OYxWKJTEUV7Qvf79meQ.jpg"
                  cover:
                    type: string
                    example: "http://127.0.0.1:8082/group/avatar/prXq4PtnTYM3U2bHuaesmIEzWwr5m98B.jpg"
      security:
        - BearerAuth: [ ]

  '/messages/{message_id}':
    post:
      description: Create Messages with user_id
      tags:
        - Messages
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: integer
            example: 2

        - name: text
          in: header
          required: false
          schema:
            type: string
            example: This is examlpe message

        - name: media
          in: header
          required: false
          description: Uploaded File
          schema:
            type: object
            example: Should be uploaded file

        - name: _method
          in: header
          required: true
          schema:
            type: string
            example: PUT
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Messages Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - BearerAuth: [ ]

    delete:
      description: Delete Message
      tags:
        - Messages

      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: integer
            example: 15

      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '204':
          description: Message successfull deleted
      security:
        - BearerAuth: [ ]

  '/countries':
    get:
      description: Get countries
      tags:
        - Countries
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/CountryListResponse'
      security:
        - BearerAuth: [ ]

  '/countries/{country_id}':
    get:
      description: Show country
      tags:
        - Countries
      parameters:
        - name: country_id
          in: path
          required: true
          schema:
            type: integer
            example: 70
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/CountryResponse'
      security:
        - BearerAuth: [ ]


  '/countries/{id}':
    get:
      description: Get Group Chat list
      tags:
        - Group Messages
      summary: Get Group Chat list
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 5

      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/CountryResponse'
      security:
        - BearerAuth: [ ]

  '/feed':
    get:
      summary: Get Feeds
      tags:
        - Feed
      parameters:
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            example: "NUb05leHRJdGVtcyI6dHJ1ZX0eyJpZCI6MTAsIl9wb2ludH"
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: after
          in: query
          required: false
          schema:
            type: string
            example: "1155"
        - name: before
          in: query
          required: false
          schema:
            type: string
            example: "1166"
      responses:
        description: Get paginated list of posts in current user's feed
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostsCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

  '/feed/{user_id}':
    get:
      summary: Get Feeds by user id
      tags:
        - Feed
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 535
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            example: eyJpZCI6MzIyLCJfcG9pbnRzVG9OZXh0SXRlbXMiOnRydWV9
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: after
          in: query
          required: false
          schema:
            type: string
            example: 1155
        - name: before
          in: query
          required: false
          schema:
            type: string
            example: 1166
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostsCursorPaginationResponse'
      description: Get paginated list of posts in current user's feed
      security:
        - BearerAuth: [ ]

  '/posts':
    get:
      summary: Get Posts
      tags:
        - Posts
      parameters:
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            example: eyJpZCI6MzIyLCJfcG9pbnRzVG9OZXh0SXRlbXMiOnRydWV9
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostsCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

    post:
      summary: Create Post
      tags:
        - Posts
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                post_text:
                  type: string
                  example: "This is post text"
                  maxLength: 5000
                active:
                  type: boolean
                  example: 1
                post_privacy:
                  type: integer
                  enum:
                    - 0
                    - 1
                    - 2
                    - 3
                  description: "`0 - everyone` `1 - people I follow` `2 - people follow me` `3 - only me`"
                comments_status:
                  type: boolean
                  example: true
                attachments:
                  type: array
                  items:
                    type: string
                    example: "file_e2c517f2585c025c51dc06fd1c7329d3"
                service_gif:
                  type: string
                  example: "https://media2.giphy.com/media/VVh7txo37uooM/200.gif?cid=b4114d90ym4bbif3jg0ylslhb981r87d914wnlvhv9np4atd&rid=200.gif&ct=g"
                  enum:
                    - "https://media2.giphy.com/media/VVh7txo37uooM/200.gif?cid=b4114d90ym4bbif3jg0ylslhb981r87d914wnlvhv9np4atd&rid=200.gif&ct=g"
                recipient_id:
                  type: integer
                  example: 111
                enable_notifications:
                  type: integer
                  description: "0 - disable, 1 - enable"
                  enum:
                    - 0
                    - 1
      responses:
        '400':
          description: Empty post
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Can’t create empty post."
                  error_code:
                    type: integer
                    example: 30801085
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostResponse'
      security:
        - BearerAuth: [ ]


  '/posts/{id}':
    get:
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 12
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostResponse'
      description: Get post by post_id
      security:
        - BearerAuth: [ ]

    put:
      description: Update post
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 12
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                post_text:
                  type: string
                  example: "This is post text update"
                  maxLength: 5000
                active:
                  type: integer
                  example: 0
                  description: "0 - disable, 1 - enable"
                  enum:
                    - 1
                    - 0
                post_privacy:
                  type: integer
                  enum:
                    - 0
                    - 1
                    - 2
                    - 3
                  description: "`0 - everyone` `1 - people I follow` `2 - people follow me` `3 - only me`"
                comments_status:
                  type: boolean
                  example: true
                attachments:
                  description: "Optional parameter, Working only photos"
                  type: array
                  items:
                    type: string
                    example: "file_e2c517f2585c025c51dc06fd1c7329d3"
                service_gif:
                  type: string
                  example: "https://media2.giphy.com/media/VVh7txo37uooM/200.gif?cid=b4114d90ym4bbif3jg0ylslhb981r87d914wnlvhv9np4atd&rid=200.gif&ct=g"
                  enum:
                    - null
                    - "https://media2.giphy.com/media/VVh7txo37uooM/200.gif?cid=b4114d90ym4bbif3jg0ylslhb981r87d914wnlvhv9np4atd&rid=200.gif&ct=g"
                enable_notifications:
                  type: integer
                  description: "0 - disable, 1 - enable"
                  enum:
                    - 0
                    - 1
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostResponse'
      security:
        - BearerAuth: [ ]

    delete:
      description: Delete post
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 12
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '204':
          $ref: '#/components/schemas/OperationSuccessfulResponse'
      security:
        - BearerAuth: [ ]

  /posts/{post_id}/like:
    post:
      summary: Post Like
      tags:
        - Post Like
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            example: 12
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '202':
          description: Like
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example:
                      enum:
                        - 'Liked'
                        - 'Unliked'
                  likes_count:
                    type: integer
                    example: 8
      security:
        - BearerAuth: [ ]

  '/posts/{post_id}/liked_users':
    description: Get Liked Users
    get:
      summary: Get Liked Users
      tags:
        - Post Like

      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            example: 13

      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: User Model
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserModel'
      security:
        - BearerAuth: [ ]

  /posts/{post_id}/hide:
    post:
      description: "Post hide"
      tags:
        - Post hide
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                post_id:
                  type: integer
                  example: 3
      responses:
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Bad request"
                  message:
                    type: string
                    example: "You can't hide your post"
                  error_code:
                    type: integer
                    example: -1400
        202:
          description: "Post hide response"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You won’t see this post in your feed"
                    enum:
                      - "You won’t see this post in your feed"
                      - "You see this post in your feed again"
                  status:
                    type: string
                    example: "Post hidden"
                    enum:
                      - "Post hidden"
                      - "Post unhidden"
      security:
        - BearerAuth: [ ]

  '/post/{post_id}/comments':
    get:
      summary: Get Post Comments
      tags:
        - Post Comments
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            example: 59
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            example: NUb05leHRJdGVtcyI6dHJ1ZX0eyJpZCI6MTAsIl9wb2ludH
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 2
        - name: after
          in: query
          required: false
          schema:
            type: string
            example: 1155
        - name: before
          in: query
          required: false
          schema:
            type: string
            example: 1166
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            example: 'id'
            enum:
              - id
              - post_id
              - text
              - time
              - likes_count
              - replies_count
            default: 'id'
        - name: sort_rule
          in: query
          required: false
          schema:
            type: string
            example: 'ASC'
            enum:
              - 'ASC'
              - 'DESC'
            default: 'ASC'
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostCommentCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

    post:
      summary: Create Post Comment
      tags:
        - Post Comments
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            example: 5
        - name: text
          in: query
          required: true
          schema:
            type: string
            example: "This is text"
            description: required_without:file
        - name: file
          in: query
          required: true
          schema:
            type: string
            example: "file_9333b72550fb534746c24cdceca12b1c"
            description: required_without:text
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostCommentResponse'
      security:
        - BearerAuth: [ ]

  '/post/{post_id}/comments/{comment_id}':
    get:
      summary: Get Post Comment
      tags:
        - Post Comments
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            example: 48
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 89
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostCommentResponse'
      security:
        - BearerAuth: [ ]

    put:
      summary: Update Post Comment
      tags:
        - Post Comments
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            example: 5
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 89
        - name: text
          in: query
          required: true
          schema:
            type: string
            example: "This is text"
            description: required_without:file
        - name: file
          in: query
          required: true
          schema:
            type: string
            example: "file_9333b72550fb534746c24cdceca12b1c"
            description: required_without:text

      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostCommentResponse'
      security:
        - BearerAuth: [ ]

    delete:
      summary: Delete Post Comment
      tags:
        - Post Comments
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
            example: 5
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 89
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '204':
          description: No Content
      security:
        - BearerAuth: [ ]

  /post/comment/{comment_id}/replies:
    get:
      summary: 'Get Post Comment Replies'
      description: 'Get a list of replies to a comment.'
      tags:
        - 'Post Comment Replies'
      parameters:
        - in: 'path'
          name: 'comment_id'
          required: true
          schema:
            type: 'integer'
            example: 111
      responses:
        200:
          $ref: '#/components/responses/CommentRepliesResponse'
      security:
        - BearerAuth: [ ]

    post:
      summary: 'Create Post Comment Reply'
      description: 'Create a new reply to a comment.'
      tags:
        - 'Post Comment Replies'
      parameters:
        - in: 'path'
          name: 'comment_id'
          required: true
          schema:
            type: 'integer'
            example: 111
        - name: text
          in: query
          required: true
          schema:
            type: string
            example: "This is text"
            description: 'Can be optional if `file` property is set and not empty.'
        - name: file
          in: query
          required: true
          schema:
            type: string
            example: "file_9333b72550fb534746c24cdceca12b1c"
            description: 'Can be optional if `text` property is set and not empty.'
      responses:
        200:
          $ref: '#/components/responses/CommentReplyResponse'
      security:
        - BearerAuth: [ ]

  /post/comment/{comment_id}/replies/{reply_id}:
    get:
      summary: 'Get Post Comment Reply'
      description: 'Get a reply to a comment.'
      tags:
        - 'Post Comment Replies'
      parameters:
        - in: 'path'
          name: 'comment_id'
          required: true
          schema:
            type: 'integer'
            example: 111
        - in: 'path'
          name: 'reply_id'
          required: true
          schema:
            type: 'integer'
            example: 222
      responses:
        200:
          $ref: '#/components/responses/CommentReplyResponse'
      security:
        - BearerAuth: [ ]

    put:
      summary: 'Update Post Comment Reply'
      description: 'Update a reply to a comment.'
      tags:
        - 'Post Comment Replies'
      parameters:
        - in: 'path'
          name: 'comment_id'
          required: true
          schema:
            type: 'integer'
            example: 111
        - in: 'path'
          name: 'reply_id'
          required: true
          schema:
            type: 'integer'
            example: 222
        - name: text
          in: query
          required: true
          schema:
            type: string
            example: "This is text"
            description: 'Can be optional if `file` property is set and not empty. Can send `text` `null` for delete'
        - name: file
          in: query
          required: true
          schema:
            type: string
            example: "file_9333b72550fb534746c24cdceca12b1c"
            description: 'Can be optional if `text` property is set and not empty. Can send `file` `null` for delete'
      responses:
        200:
          $ref: '#/components/responses/CommentReplyResponse'
      security:
        - BearerAuth: [ ]

    delete:
      summary: 'Delete Post Comment Reply'
      description: 'Delete a reply to a comment.'
      tags:
        - 'Post Comment Replies'
      parameters:
        - in: 'path'
          name: 'comment_id'
          required: true
          schema:
            type: 'integer'
            example: 111
        - in: 'path'
          name: 'reply_id'
          required: true
          schema:
            type: 'integer'
            example: 222
      responses:
        200:
          description: 'No content'
      security:
        - BearerAuth: [ ]

  /post/comment/{comment_id}/replies/{reply_id}/like:
    post:
      summary: 'Toggle Post Comment Reply Like'
      description: 'Toggle a like of a reply to a comment.'
      tags:
        - 'Post Comment Replies'
      parameters:
        - in: 'path'
          name: 'comment_id'
          required: true
          schema:
            type: 'integer'
            example: 111
        - in: 'path'
          name: 'reply_id'
          required: true
          schema:
            type: 'integer'
            example: 222
      responses:
        202:
          description: 'Toggle message and likes count of a reply to a comment.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - 'Liked'
                      - 'Unliked'
                  likes_count:
                    type: integer
                    example: 10
      security:
        - BearerAuth: [ ]

  '/follow/popular':
    description: 'List users, sorted by popularity'
    get:
      tags:
        - Popular Users
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PopularUsersResponse'
                example:
                  $ref: '#/components/examples/UserExample'
          description: Default response
      security:
        - BearerAuth: [ ]

  '/follow/{user_id}':
    post:
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 12
      tags:
        - Users
        - Follow
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/schemas/FollowUserResponse'
      description: Toggle follow user by user_id
      security:
        - BearerAuth: [ ]

  /follow/search/{user_id}:
    get:
      summary: Search User follows
      tags:
        - Follow
      parameters:
        - name: user_id
          in: path
          required: false
          schema:
            type: integer
            example: 1227
        - name: search
          in: query
          required: true
          schema:
            type: string
            example: "Alex"
        - name: search_by
          in: query
          required: true
          schema:
            type: string
            example: "followers"
            enum:
              - "followers"
              - "followings"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/FollowCursorPaginate'
      security:
        - BearerAuth: [ ]

  '/users/{user_id}/chats':
    get:
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 12
      tags:
        - Chats
        - Users
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PaginateChatsResponse'
      description: List chats availible to current user
      security:
        - BearerAuth: [ ]

  '/chats':
    get:
      tags:
        - Chats
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PaginateChatsResponse'
      description: Paginate all chats
      security:
        - BearerAuth: [ ]

    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                group_slug:
                  type: string
                  example: this_example_chat_name
                avatar:
                  type: object
                  example: SomeBlob should be UploadedFile
                users:
                  type: array
                  example: 123
                  items:
                    type: integer
                    format: int32
              example:
                group_slug: some_chat
                avatar: UploadedFile
                users:
                  - 123
                  - 2
                  - 512
      tags:
        - Chats
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatResponse'
              example:
                chat_id: 2123
          description: Successfull response
      description: Create new chat
      security:
        - BearerAuth: [ ]

  '/chats/{id}':
    get:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 12
      tags:
        - Chats
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/schemas/GetSingleChatResponse'
      description: Get chat by chat_id
      security:
        - BearerAuth: [ ]

    delete:
      description: Delete chat
      tags:
        - Chats
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 12
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/schemas/DeleteChatResponse'
      security:
        - BearerAuth: [ ]

    patch:
      description: Update chat
      tags:
        - Chats
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 12
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                group_slug:
                  type: string
                  example: this_example_chat_name_updated
                avatar:
                  type: object
                  example: SomeBlob should be UploadedFile
                users:
                  type: array
                  example: 123
                  items:
                    type: integer
                    format: int32
                _method:
                  type: string
                  example: PUT
              example:
                group_slug: some_chat_update
                avatar: UploadedFile
                users:
                  - 123
                  - 2
                  - 512
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/schemas/UpdateChatResponse'
      security:
        - BearerAuth: [ ]

  '/chats/{id}/user':
    post:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 12
      tags:
        - Chats
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/schemas/InviteUserToChatResponse'
      description: Invite user to chat
    delete:
      description: Kick user from chat
      tags:
        - Chats
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 12
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/schemas/KickUserFromChatResponse'
      security:
        - BearerAuth: [ ]

  #  '/chats/{id}/user/ban':
  #    delete:
  #      parameters:
  #        - in: path
  #          name: id
  #          required: true
  #          example: 12
  #      tags:
  #        - Chats
  #      responses:
  #        '401':
  #          $ref: '#/components/responses/UnauthorizedErrorResponse'
  #        '403':
  #          $ref: '#/components/responses/ForbiddenErrorResponse'
  #        '404':
  #          $ref: '#/components/responses/NotFoundErrorResponse'
  #        '405':
  #          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
  #        '500':
  #          $ref: '#/components/responses/InternalServerErrorResponse'
  #        '200':
  #          $ref: '#/components/schemas/BanUserFromChatResponse'
  #      description: Ban user from chat
  /chats/{id}/users:
    get:
      summary: Get Group Chat Users
      tags:
        - Chats
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 67

      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Get Group Chat with Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupChatList'
      security:
        - BearerAuth: [ ]

  /files/uploads:
    post:
      summary: Upload Files
      tags:
        - Files
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  example: "file.jpg"
                files:
                  type: array
                  items:
                    type: object
                    properties:
                      file:
                        type: string
                        format: binary
                        example: "file.jpg"
                  maxItems: 20
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    example: "file_e2c517f2585c025c51dc06fd1c7329d3"

  /files/uploads/{uuid}:
    get:
      summary: Get Files
      tags:
        - Files
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            example: "file_e2c517f2585c025c51dc06fd1c7329d3"
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      type: string
                      example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/files/HxxTIj9pb0zYvfItx6QWMOfMW57AxjqR.jpg"
                      enum:
                        - null
                        - [
                            "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/files/HxxTIj9pb0zYvfItx6QWMOfMW57AxjqR.jpg"
                        ]

    post:
      summary: Update Files
      tags:
        - Files
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            example: "file_e2c517f2585c025c51dc06fd1c7329d3"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  example: "file.jpg"
                files:
                  type: array
                  items:
                    type: object
                    properties:
                      file:
                        type: string
                        format: binary
                        example: "file.jpg"
                  maxItems: 20
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    example: "file_e2c517f2585c025c51dc06fd1c7329d3"
                    enum:
                      - "file_e2c517f2585c025c51dc06fd1c7329d3"
                      - null

    delete:
      summary: Delete Files
      tags:
        - Files
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            example: "file_e2c517f2585c025c51dc06fd1c7329d3"
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                    enum:
                      - true
                      - false
                      - null


  /ping:
    get:
      tags:
        - Utility
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/schemas/HealthCheckResponse'
      description: Health check

  /location:
    get:
      summary: 'Location'
      description: 'Search for a location in Google Places API. For this endpoint to work properly you should create (https://console.cloud.google.com/) and set an API key in `google_map_api` config property in `Wo_Config` database table.'
      tags:
        - 'Utility'
      parameters:
        - in: 'query'
          name: 'search'
          required: true
          schema:
            type: 'string'
            example: 'Kiev'
      responses:
        200:
          $ref: '#/components/responses/LocationResponse'
      security:
        - BearerAuth: [ ]

  /blockdesk/trending/block:
    get:
      summary: 'Blockdesk Trending Block Articles'
      description: "Get articles for Blockdesk Today's Trending block"
      tags:
        - 'Blockdesk'
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            enum:
              - 4
              - 5
              - 6
              - 7
              - 8
              - 10
            default: 4
      responses:
        200:
          $ref: '#/components/responses/BlockdeskBlocksResponse'

  /post/{post_id}/comment/{comment_id}/like:
    post:
      summary: 'Toggle Post Comment Like'
      description: 'Toggle a like of a comment.'
      tags:
        - 'Post Comments'
      parameters:
        - in: 'path'
          name: 'post_id'
          required: true
          schema:
            type: 'integer'
            example: 111
        - in: 'path'
          name: 'comment_id'
          required: true
          schema:
            type: 'integer'
            example: 222
      responses:
        202:
          $ref: '#/components/responses/ToggleLikeResponse'
      security:
        - BearerAuth: [ ]

  /blockdesk/popular/block:
    get:
      summary: 'Blockdesk Popular Block Articles'
      description: 'Get articles for Blockdesk Popular block'
      tags:
        - 'Blockdesk'
      responses:
        200:
          $ref: '#/components/responses/BlockdeskBlocksResponse'

  /blockdesk/editors-choice/block:
    get:
      summary: 'Blockdesk Editors Choice Block Articles'
      description: 'Get articles for Blockdesk Editors Choice block'
      tags:
        - 'Blockdesk'
      responses:
        200:
          $ref: '#/components/responses/BlockdeskBlocksResponse'

  /blockdesk/latest/block:
    get:
      summary: 'Blockdesk Latest Block Articles'
      description: 'Get articles for Blockdesk Latest block'
      tags:
        - Blockdesk
      parameters:
        - name: categories_ids
          in: query
          required: false
          schema:
            type: string
            example: '1,2,3'
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
            default: 6
        - name: cursor_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
      responses:
        200:
          $ref: '#/components/responses/BlockdeskBlocksPaginatedResponse'

  /blockdesk/{article_id}/comments:
    get:
      summary: Blockdesk Comment
      tags:
        - Blockdesk Comment
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 15
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
            default: 15
        - name: cursor_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/BlockdeskCommentPaginationResponse'

    post:
      summary: Create Blockdesk Comment
      tags:
        - Blockdesk Comment
      parameters:
        - name: blog_id
          in: path
          required: true
          schema:
            type: integer
            example: 23

      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - text
                - file
              properties:
                text:
                  type: string
                  example: "It is create comment"
                  description: required_without:file
                file:
                  type: string
                  example: "file_9333b72550fb534746c24cdceca12b1c"
                  description: required_without:text
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/BlockdeskCommentResponse'

  /blockdesk/{article_id}/comments/{comment_id}:
    get:
      summary: Show Blockdesk Comment
      tags:
        - Blockdesk Comment
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 23
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 45
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/BlockdeskCommentResponse'

    put:
      summary: Update Blockdesk Comment
      tags:
        - Blockdesk Comment
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 432
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 230
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - text
                - file
              properties:
                text:
                  type: string
                  example: "It is update blog comment text"
                  description: required_without:file
                file:
                  type: string
                  example: "file_9333b72550fb534746c24cdceca12b1c"
                  description: required_without:text
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/BlockdeskCommentResponse'

    delete:
      summary: Delete Blockdesk Comment
      tags:
        - Blockdesk Comment
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 24
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 345
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '204':
          $ref: '#/components/responses/NoContentResponse'

  /blockdesck/{article_id}/comments/{comment_id}/replies:
    get:
      summary: Get Blockdesk Comment Replies
      tags:
        - Blockdesk Comment Reply
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 23
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 230
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 10
            default: 15
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/BlockdeskCommentReplyPaginationResponse'

    post:
      summary: Create Blockdesk Comment Reply
      tags:
        - Blockdesk Comment Reply
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 23
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 230
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - text
                - file
              properties:
                text:
                  type: string
                  example: "It is text reply comment text"
                  description: 'Can be optional if `file` property is set and not empty. Can send `text` `null` for delete'
                file:
                  type: string
                  example: "file_9333b72550fb534746c24cdceca12b1c"
                  description: 'Can be optional if `text` property is set and not empty. Can send `file` `null` for delete'
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/BlockdeskCommentReplyResponse'

  /blockdesk/{article_id}/comments/{comment_id}/replies/{comment_reply_id}:
    get:
      summary: Show Blockdesk Comment Reply
      tags:
        - Blockdesk Comment Reply
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 12
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 34
        - name: comment_reply_id
          in: path
          required: true
          schema:
            type: integer
            example: 405
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/BlockdeskCommentReplyResponse'

    put:
      summary: Update Blockdesk Comment Reply
      tags:
        - Blockdesk Comment Reply
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 12
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 34
        - name: comment_reply_id
          in: path
          required: true
          schema:
            type: integer
            example: 405
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - text
                - file
              properties:
                text:
                  type: string
                  example: "It is text reply comment text"
                  description: 'Can be optional if `file` property is set and not empty. Can send `text` `null` for delete'
                file:
                  type: string
                  example: "file_9333b72550fb534746c24cdceca12b1c"
                  description: 'Can be optional if `text` property is set and not empty. Can send `file` `null` for delete'
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/BlockdeskCommentReplyResponse'

    delete:
      summary: Delete Blockdesk Comment Reply
      tags:
        - Blockdesk Comment Reply
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 23
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 45
        - name: comment_reply_id
          in: path
          required: true
          schema:
            type: integer
            example: 455

      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '204':
          $ref: '#/components/responses/NoContentResponse'

  /blockdesk/{article_id}/comments/{comment_id}/likes:
    post:
      summary: Blockdesk Comment Like
      tags:
        - Blockdesk Comment Like
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 24
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 34
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '202':
          description: Response Blockdesk Comment Like
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Liked"
                    enum:
                      - "Liked"
                      - "Unliked"
                  likes_count:
                    type: integer
                    example: 2
                    enum:
                      - 23
                      - 0

  /blockdesk/comments/replies/{reply_comment_id}/likes:
    post:
      summary: Blockdesk Reply Comment Like
      tags:
        - Blockdesk Reply Comment Like
      parameters:
        - name: reply_comment_id
          in: path
          required: true
          schema:
            type: integer
            example: 34
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '202':
          description: Response Blockdesk Comment Like
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Liked"
                    enum:
                      - "Liked"
                      - "Unliked"
                  likes_count:
                    type: integer
                    example: 2
                    enum:
                      - 23
                      - 0

  /blockdesk/save:
    get:
      summary: Blockdesk - Tab Saved
      tags:
        - Blockdesk Save
      parameters:
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
        - name: cursor_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/SavedArticlesPaginateResponse'

  /blockdesk/{article_id}/save:
    post:
      summary: Saved article in blockdesk
      tags:
        - Blockdesk Save
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 34
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          description: Response Blockdesk Bookmark
          content:
            application/json:
              schema:
                type: object
                properties:
                  saved:
                    type: boolean
                    example: true
                    enum:
                      - true
                      - false

  /blockdesk/search:
    get:
      summary: Blockdesk Search
      tags:
        - Blockdesk Search
      parameters:
        - name: search
          in: query
          required: true
          schema:
            type: string
            example: "Blockchain"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/BlockdeskSearchPaginateResponse'

  /blockdesk/{article_id}:
    get:
      summary: 'Blockdesk Article'
      description: 'Get Blockdesk article.'
      tags:
        - 'Blockdesk'
      responses:
        200:
          $ref: '#/components/responses/BlockdeskArticleResponse'

  /blockdesk/article/following:
    get:
      summary: 'Blockdesk Article Following'
      description: 'Get Blockdesk article following.'
      parameters:
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 15
      tags:
        - 'Blockdesk'
      responses:
        200:
          $ref: '#/components/responses/BlockdeskArticleFollowingResponse'

  /post/{post_id}/comments/{comment_id}/report:
    post:
      summary: 'Post Comment Report'
      description: 'Report post comment.'
      tags:
        - 'Post Comments'
      parameters:
        - name: 'post_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 111
        - name: 'comment_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 222
        - name: 'text'
          in: 'query'
          required: true
          schema:
            type: 'string'
            example: 'My report text 123'
            minLength: 4
            maxLength: 40
      responses:
        200:
          $ref: '#/components/responses/PostCommentReportResponse'
      security:
        - BearerAuth: [ ]

  /post/{post_id}/comments/{comment_id}/report/withdraw:
    post:
      summary: 'Post Comment Report Withdraw'
      description: 'Withdraw post comment report.'
      tags:
        - 'Post Comments'
      parameters:
        - name: 'post_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 111
        - name: 'comment_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 222
      responses:
        200:
          $ref: '#/components/responses/PostCommentReportWithdrawResponse'
      security:
        - BearerAuth: [ ]

  /blockdesk/my-articles:
    get:
      summary: 'Blockdesk My Articles'
      description: 'Get Blockdesk My Articles tab articles.'
      tags:
        - 'Blockdesk'
      parameters:
        - name: 'per_page'
          in: 'query'
          schema:
            type: 'integer'
            example: 15
      responses:
        200:
          $ref: '#/components/responses/BlockdeskMyArticlesResponse'

  '/blockdesk/article/categories':
    description: Article Categories
    get:
      summary: Blockdesk Article Categories list
      tags:
        - 'Blockdesk'
      responses:
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "You don't have enough rights"
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/ArticleCategoriesListResourceResponse'

  /blockdesk/{article_id}/likes:
    post:
      summary: Blockdesk article like
      tags:
        - Blockdesk Likes
      parameters:
        - name: article_id
          in: path
          required: true
          schema:
            type: integer
            example: 23
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '202':
          description: Blockdesk Like
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Liked"
                    enum:
                      - "Liked"
                      - "Unliked"
                  likes_count:
                    type: integer
                    example: 34
                    enum:
                      - 0
                      - 1
                      - 23

  /blockdesk/{article_id}/comments/{comment_id}/reports:
    post:
      summary: 'Blockdesk Article Comment Report'
      description: 'Report Blockdesk article comment.'
      tags:
        - 'Blockdesk Comment'
      parameters:
        - name: 'article_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 111
        - name: 'comment_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 222
        - name: 'text'
          in: 'query'
          required: true
          schema:
            type: 'string'
            example: 'My report text 123'
            minLength: 4
            maxLength: 40
      responses:
        202:
          $ref: '#/components/responses/BlockdeskArticleCommentReportResponse'

  /blockdesk/{article_id}/comments/{comment_id}/reports/withdraw:
    post:
      summary: 'Blockdesk Article Comment Report Withdraw'
      description: 'Withdraw Blockdesk article comment report.'
      tags:
        - 'Blockdesk Comment'
      parameters:
        - name: 'article_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 111
        - name: 'comment_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 222
      responses:
        202:
          $ref: '#/components/responses/BlockdeskArticleCommentReportWithdrawResponse'

  /blockdesk/{article_id}/share:
    get:
      summary: 'Blockdesk Article Share Url'
      description: 'Get Blockdesk article share url.'
      tags:
        - 'Blockdesk'
      parameters:
        - name: 'article_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 123
      responses:
        200:
          $ref: '#/components/responses/BlockdeskArticleShareUrlResponse'

  /posts/{post_id}/pin:
    post:
      summary: 'Post Pin Toggle'
      description: 'Toggle post pin.'
      tags:
        - 'Posts'
      parameters:
        - name: 'post_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 123
      responses:
        200:
          $ref: '#/components/responses/PostPinToggleResponse'
      security:
        - BearerAuth: [ ]

  /posts/{post_id}/share:
    post:
      summary: 'Post Get Link'
      description: 'Post Get Link.'
      tags:
        - 'Posts'
      parameters:
        - name: 'post_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 123
      responses:
        200:
          $ref: '#/components/responses/PostLinkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - BearerAuth: [ ]

  /tags/top/list:
    get:
      summary: 'Top Tags List'
      description: 'Get top tags list.'
      tags:
        - 'Feed'
      responses:
        200:
          $ref: '#/components/responses/TopTagsList'
      security:
        - BearerAuth: [ ]

  /tags/top:
    get:
      summary: 'Top Tags Posts'
      description: 'Get top tags posts.'
      tags:
        - 'Feed'
      parameters:
        - name: 'tag'
          in: 'query'
          schema:
            type: 'string'
            example: 'hashtag'
        - name: 'sorting'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'popular'
              - 'recent'
        - name: 'per_page'
          in: 'query'
          schema:
            type: 'integer'
            example: 10
      responses:
        200:
          $ref: '#/components/responses/TopTagsPosts'
      security:
        - BearerAuth: [ ]

  /tags/hot-today/list:
    get:
      summary: 'Hot Today Tags List'
      description: 'Get hot today tags list.'
      tags:
        - 'Feed'
      responses:
        200:
          $ref: '#/components/responses/HotTodayTagsList'
      security:
        - BearerAuth: [ ]

  /tags/hot-today:
    get:
      summary: 'Hot Today Tags Posts'
      description: 'Get hot today tags posts.'
      tags:
        - 'Feed'
      parameters:
        - name: 'tag'
          in: 'query'
          schema:
            type: 'string'
            example: 'hashtag'
        - name: 'sorting'
          in: 'query'
          schema:
            type: 'string'
            enum:
              - 'popular'
              - 'recent'
        - name: 'per_page'
          in: 'query'
          schema:
            type: 'integer'
            example: 10
      responses:
        200:
          $ref: '#/components/responses/HotTodayTagsPosts'
      security:
        - BearerAuth: [ ]

  /feed/search:
    get:
      summary: Search feeds
      description: Search feeds
      tags:
        - Feed
      parameters:
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
            example: 5
        - name: search
          in: query
          required: true
          schema:
            type: string
            example: "News one"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '200':
          $ref: '#/components/responses/PostsCursorPaginationResponse'
      security:
        - BearerAuth: [ ]

  /users/me/devices:
    post:
      summary: Save User device token
      tags:
        - FCM Device
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - device_token
                - device_id
              properties:
                device_token:
                  type: string
                  example: "tokenf8y2t2xmS8CogPBs6L0AgK:APA91bECU778yqEHUWG9t2duU0cw2uc0YIvB6Gq8kFIsAyQ9RBBLBKOddfeAJMqUml9K9EHSwdtOcJQNZH3CMdN4jCpItby4sl8r_aw8dwa8d88JAWDKJl"
                device_id:
                  type: string
                  example: "KV1QiLCJhbGciOi"
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '405':
          $ref: '#/components/responses/MethodNotAllowedHttpResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
        '202':
          description: Blockdesk Like
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                    enum:
                      - false
                      - true
      security:
        - BearerAuth: [ ]

  /users/fcm_send/{user_id}:
    post:
      summary: Only for testing
      tags:
        - FCM Device
      parameters:
        - name: user_id
          in: path
          description: "
            If not `user_id` notification will send authenticated User
          "
          schema:
            type: integer
            example: 1727
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Title text"
                subtitle:
                  type: string
                  example: "Subtitle text"
                body:
                  type: string
                  example: "Body text"
                type:
                  type: string
                  example: 'custom-type'
                content_id:
                  type: integer
                  example: 1
                comment_id:
                  type: integer
                  example: 23
                key:
                  type: string
                  example: "value"
      responses:
        200:
          description: Result optional
          content:
            application/json:
              schema:
                type: object
                properties:
                  android:
                    type: object
                    properties:
                      notification:
                        type: array
                      data:
                        type: object
                        properties:
                          type:
                            type: string
                            example: "custom-type"
                            enum:
                              - "default-type"
                          title:
                            type: string
                            example: "Title Title"
                          subtitle:
                            type: string
                            example: "Subtitle Subt"
                          body:
                            type: string
                            example: "body body body body body body"
                          content_id:
                            type: string
                            example: "1"
                          comment_id:
                            type: string
                            example: "23"
                          key:
                            type: string
                            example: "value"
                      fcm_options:
                        type: object
                        properties:
                          analytics_label:
                            type: string
                            example: null

                  apns:
                    type: object
                    properties:
                      header:
                        type: array
                      payload:
                        type: object
                        properties:
                          aps:
                            type: object
                            properties:
                              alert:
                                type: object
                                properties:
                                  title:
                                    type: string
                                    example: "Title Title"
                                  subtitle:
                                    type: string
                                    example: "Subtitle Subtit"
                                  body:
                                    type: string
                                    example: "body body body body body body"
                              data:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    example: "custom-type"
                                  content_id:
                                    type: integer
                                    example: 1
                                  comment_id:
                                    type: integer
                                    example: 32
                                  key:
                                    type: string
                                    example: "value"
                              thread-id:
                                type: string
                                example: "custom-type"
                              badge:
                                type: integer
                                example: 1
                              sound:
                                type: string
                                example: "default"
                      fcm_options:
                        type: object
                        properties:
                          analytics_label:
                            type: string
                            example: null
      security:
        - BearerAuth: [ ]

  /users/{user_id}/timeline:
    get:
      summary: 'User Timeline'
      description: "Get user's timeline posts."
      tags:
        - 'Users'
      parameters:
        - name: 'user_id'
          in: 'path'
          schema:
            type: 'integer'
            example: 123
        - name: 'per_page'
          in: 'query'
          schema:
            type: 'integer'
            example: 10
      responses:
        200:
          $ref: '#/components/responses/UserTimelinePosts'
      security:
        - BearerAuth: [ ]


  # Push Notifications
  /blockdesk_article_comment_like:
    post:
      description: Blockdesk Article Comment Like
      tags:
        - Push Notifications
      responses:
        200:
          description: "Android Push Notification"
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: array
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: "blockdesk_article_comment_like"
                      title:
                        type: string
                        example: "Testвввawd Testovkyu & 40 other"
                      subtitle:
                        type: string
                        example: " liked your comment"
                      body:
                        type: string
                        example: "This blog awd dawd awa comment local develop 55559999adaw  awd awdaw dawd"
                      content_id:
                        type: string
                        example: "1"
                        description: '
                          Is article_id
                        '
                      comment_id:
                        type: string
                        example: "8"

        201:
          description: "iOS Push Notification"
          content:
            application/json:
              schema:
                type: object
                properties:
                  headers:
                    type: array
                  payload:
                    type: object
                    properties:
                      aps:
                        type: object
                        properties:
                          alert:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Testвввawd Testovkyu & 44 other"
                              subtitle:
                                type: string
                                example: " liked your comment"
                              body:
                                type: string
                                example: "This blog awd dawd awa comment local develop 55559999adaw  awd awdaw dawd"
                          data:
                            type: object
                            properties:
                              type:
                                type: string
                                example: "blockdesk_article_comment_like"
                              content_id:
                                type: integer
                                example: 1
                              comment_id:
                                type: integer
                                example: 8

  /blockdesk_article_comment_reply:
    post:
      description: Created Blockdesk Arricle Comment Reply
      tags:
        - Push Notifications
      responses:
        200:
          description: "Android Push Notification"
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: array
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: "blockdesk_article_comment_reply"
                      title:
                        type: string
                        example: "Testвввawd Testovkyu & 44 other"
                      subtitle:
                        type: string
                        example: "replied your comment"
                      body:
                        type: string
                        example: "It is remply commentawdwad"
                      content_id:
                        type: integer
                        example: "1"
                        description: '
                          Is article_id
                        '
                      comment_id:
                        type: string
                        example: "8"
                      comment_reply_id:
                        type: string
                        example: "68"

        201:
          description: "iOS Push Notification"
          content:
            application/json:
              schema:
                type: object
                properties:
                  headers:
                    type: array
                  payload:
                    type: object
                    properties:
                      aps:
                        type: object
                        properties:
                          alert:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Testвввawd Testovkyu & 44 other"
                              subtitle:
                                type: string
                                example: "answered your comment"
                              body:
                                type: string
                                example: "It is remply commentawdwad"
                          data:
                            type: object
                            properties:
                              type:
                                type: string
                                example: "blockdesk_article_comment_reply"
                              content_id:
                                type: integer
                                example: 1
                              comment_id:
                                type: integer
                                example: 8
                              comment_reply_id:
                                type: integer
                                example: 68

  /blockdesk_article_reply_like:
    post:
      description: Blockdesk Article Reply Like
      tags:
        - Push Notifications
      responses:
        200:
          description: "Android Push Notification"
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: array
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: "blockdesk_article_reply_like"
                      title:
                        type: string
                        example: "Testвввawd Testovkyu & 20 other"
                      subtitle:
                        type: string
                        example: "liked your comment"
                      body:
                        type: string
                        example: "This blog comment reply"
                      content_id:
                        type: integer
                        example: "1"
                        description: '
                          Is article_id
                        '
                      comment_id:
                        type: string
                        example: "6"
                      comment_reply_id:
                        type: string
                        example: '76'
        201:
          description: iOS Push Notification
          content:
            application/json:
              schema:
                type: object
                properties:
                  headers:
                    type: array
                  payload:
                    type: object
                    properties:
                      aps:
                        type: object
                        properties:
                          alert:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Testвввawd Testovkyu & 20 other"
                              subtitle:
                                type: string
                                example: "liked your comment"
                              body:
                                type: string
                                example: "This blog comment reply"
                          data:
                            type: object
                            properties:
                              type:
                                type: string
                                example: "blockdesk_article_reply_like"
                              content_id:
                                type: integer
                                example: 1
                                description: '
                                  Is article_id
                                '
                              comment_id:
                                type: integer
                                example: 6
                              comment_reply_id:
                                type: integer
                                example: 76

  /feed_post_like:
    post:
      description: Post Like Notification
      tags:
        - Push Notifications
      responses:
        200:
          description: Android Push
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: array
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: "feed_post_like"
                      title:
                        type: string
                        example: "Testвввawd Testovkyu & 31 other"
                      subtitle:
                        type: string
                        example: "liked your post"
                      body:
                        type: string
                        example: "Createawdwad wa dwa d "
                      post_id:
                        type: string
                        example: "1"
        201:
          description: iOS Push Notification
          content:
            application/json:
              schema:
                type: object
                properties:
                  headers:
                    type: array
                  payload:
                    type: object
                    properties:
                      aps:
                        type: object
                        properties:
                          alert:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Testвввawd Testovkyu & 31 other"
                              subtitle:
                                type: string
                                example: "Testвввawd Testovkyu & 31 other"
                              body:
                                type: string
                                example: "Createawdwad wa dwa d"
                          data:
                            type: object
                            properties:
                              type:
                                type: string
                                example: "feed_post_like"
                              post_id:
                                type: string
                                example: 1

  /feed_post_new_comment:
    post:
      description: Post Comment Created
      tags:
        - Push Notifications
      responses:
        200:
          description: Android Push Notification
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: array
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: "feed_post_new_comment"
                      title:
                        type: string
                        example: "Testвввawd Testovkyu & 16 other"
                      subtitle:
                        type: string
                        example: "ommented your post"
                      body:
                        type: string
                        example: "Createawdwad wa dwa d"
                      content_id:
                        type: string
                        example: "2"
                      comment_id:
                        type: string
                        example: "40"
        201:
          description: iOS Push Notification
          content:
            application/json:
              schema:
                type: object
                properties:
                  headers:
                    type: array
                  payload:
                    type: object
                    properties:
                      aps:
                        type: object
                        properties:
                          alert:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Testвввawd Testovkyu & 16 other"
                              subtitle:
                                type: string
                                example: "commented your post"
                              body:
                                type: string
                                example: "Createawdwad wa dwa d"
                          data:
                            type: object
                            properties:
                              type:
                                type: string
                                example: "feed_post_new_comment"
                              content_id:
                                type: integer
                                example: 2
                              comment_id:
                                type: integer
                                example: 40

  /feed_post_new_comment_reply:
    post:
      description: Post Commet Reply Created
      tags:
        - Push Notifications
      responses:
        200:
          description: Android Push Notification
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: array
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: "feed_post_new_comment_reply"
                      title:
                        type: string
                        example: "Testвввawd Testovkyu & 23 other"
                      subtitle:
                        type: string
                        example: "replied on your post comment"
                      body:
                        type: string
                        example: "This is text This is text This is text This is text This is text awdawd"
                      content_id:
                        type: string
                        example: "1"
                      comment_id:
                        type: string
                        example: "202"
                      comment_reply_id:
                        type: string
                        example: "143"
        201:
          description: iOS Push Notification
          content:
            application/json:
              schema:
                type: object
                properties:
                  headers:
                    type: array
                  payload:
                    type: object
                    properties:
                      aps:
                        type: object
                        properties:
                          alert:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Testвввawd Testovkyu & 23 other"
                              subtitle:
                                type: string
                                example: "replied on your post comment"
                              body:
                                type: string
                                example: "This is text This is text This is text This is text This is text awdawd"
                          data:
                            type: object
                            properties:
                              type:
                                type: string
                                example: "feed_post_new_comment_reply"
                              content_id:
                                type: integer
                                example: 1
                              comment_id:
                                type: integer
                                example: 202
                              comment_reply_id:
                                type: integer
                                example: 143

  /feed_post_comment_like:
    post:
      description: Post Comment Like
      tags:
        - Push Notifications
      responses:
        200:
          description: Android Push Notification
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: array
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: 'feed_post_comment_like'
                      title:
                        type: string
                        example: "Testвввawd Testovkyu & 4 other"
                      subtitle:
                        type: string
                        example: "liked on your comment"
                      body:
                        type: string
                        example: "This blog comment local develop 55559999"
                      content_id:
                        type: string
                        example: "1"
                      comment_id:
                        type: string
                        example: "2"
        201:
          description: iOS Push Notification
          content:
            application/json:
              schema:
                type: object
                properties:
                  headers:
                    type: array
                  payload:
                    type: object
                    properties:
                      aps:
                        type: object
                        properties:
                          alert:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Testвввawd Testovkyu & 6 other"
                              subtitle:
                                type: string
                                example: "liked on your comment"
                              body:
                                type: string
                                example: "This blog comment local develop 55559999"
                          data:
                            type: object
                            properties:
                              type:
                                type: string
                                example: "feed_post_comment_like"
                              content_id:
                                type: integer
                                example: 1
                              comment_id:
                                type: integer
                                example: 2

  /feed_post_comment_reply_like:
    post:
      description: Post Comment Reply Like
      tags:
        - Push Notifications
      responses:
        200:
          description: "Android Push Notification"
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: array
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: "feed_post_comment_reply_like"
                      title:
                        type: string
                        example: "Testвввawd Testovkyu & 5 other"
                      subtitle:
                        type: string
                        example: "liked your reply comment"
                      body:
                        type: string
                        example: "It is remply comment"
                      content_id:
                        type: string
                        example: "1"
                      comment_id:
                        type: string
                        example: "8"
                      content_reply_id:
                        type: string
                        example: "1"

        201:
          description: "iOS Push Notification"
          content:
            application/json:
              schema:
                type: object
                properties:
                  headers:
                    type: array
                  payload:
                    type: object
                    properties:
                      aps:
                        type: object
                        properties:
                          aps:
                            type: object
                            properties:
                              alert:
                                type: object
                                properties:
                                  title:
                                    type: string
                                    example: "Testвввawd Testovkyu & 5 other"
                                  subtitle:
                                    type: string
                                    example: "liked your reply comment"
                                  body:
                                    type: string
                                    example: "It is remply comment"
                              data:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    example: "feed_post_comment_reply_like"
                                  content_id:
                                    type: integer
                                    example: 1
                                  comment_id:
                                    type: integer
                                    example: 8
                                  comment_reply_id:
                                    type: integer
                                    example: 1

  /repost_post:
    post:
      summary: Post Reposted
      tags:
        - Push Notifications
      responses:
        200:
          description: Android Push Notification
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: array
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: 'repost_post'
                      title:
                        type: string
                        example: "Testвввawd Testovkyu & 4 other"
                      subtitle:
                        type: string
                        example: "reported your post"
                      body:
                        type: string
                        example: "Post text"
                      post_id:
                        type: string
                        example: "1"
        201:
          description: iOS Push Notification
          content:
            application/json:
              schema:
                type: object
                properties:
                  headers:
                    type: array
                  payload:
                    type: object
                    properties:
                      aps:
                        type: object
                        properties:
                          alert:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Testвввawd Testovkyu & 6 other"
                              subtitle:
                                type: string
                                example: "reported your post"
                              body:
                                type: string
                                example: "This blog comment local develop 55559999"
                          data:
                            type: object
                            properties:
                              type:
                                type: string
                                example: "repost_post"
                              post_id:
                                type: integer
                                example: 1405

  /following:
    post:
      summary: Following
      tags:
        - Push Notifications
      responses:
        200:
          description: Android Push Notificatrion
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: array
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: "following"
                      title:
                        type: string
                        example: "Test Testov & 4 other"
                      subtitle:
                        type: string
                        enum:
                          - "Followed"
                          - "Follow request sent"
                      avatar:
                        type: string
                        example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/2020/04/8mmoNw2VGjN8EMP4VmhT_03_da8e604ed0d81ad9edc6676137fdf63c_image.png"
        201:
          description: iOS Push Notification
          content:
            application/json:
              schema:
                type: object
                properties:
                  headers:
                    type: array
                  payload:
                    type: object
                    properties:
                      aps:
                        type: object
                        properties:
                          alert:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Test Testov & 4 other"
                              subtitle:
                                type: string
                                enum:
                                  - "Followed"
                                  - "Follow request sent"

                          data:
                            type: object
                            properties:
                              avatar:
                                type: string
                                example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/2020/04/8mmoNw2VGjN8EMP4VmhT_03_da8e604ed0d81ad9edc6676137fdf63c_image.png"

  /users/timeline:
    get:
      summary: 'Current User Timeline'
      description: "Get current user's timeline posts."
      tags:
        - 'Users'
      parameters:
        - name: 'per_page'
          in: 'query'
          schema:
            type: 'integer'
            example: 10
      responses:
        200:
          $ref: '#/components/responses/UserTimelinePosts'
      security:
        - BearerAuth: [ ]

  /users/following-requests/{follower_id}/accept:
    get:
      summary: 'Accept Follow Request'
      description: "Accept user's follow request."
      tags:
        - 'Follow'
      parameters:
        - name: 'follower_id'
          in: 'path'
          schema:
            type: 'integer'
            example: 123
      responses:
        200:
          $ref: '#/components/responses/UserAcceptFollowRequest'
      security:
        - BearerAuth: [ ]

  /users/following-requests/{follower_id}/decline:
    get:
      summary: 'Decline Follow Request'
      description: "Decline user's follow request."
      tags:
        - 'Follow'
      parameters:
        - name: 'follower_id'
          in: 'path'
          schema:
            type: 'integer'
            example: 123
      responses:
        200:
          $ref: '#/components/responses/UserDeclineFollowRequest'
      security:
        - BearerAuth: [ ]

  /users/timeline/pinned:
    get:
      summary: 'Current User Timeline Pinned'
      description: "Get current user's timeline pinned posts."
      tags:
        - 'Users'
      parameters:
        - name: 'per_page'
          in: 'query'
          schema:
            type: 'integer'
            example: 10
      responses:
        200:
          $ref: '#/components/responses/UserTimelinePinnedPosts'
      security:
        - BearerAuth: [ ]

  /posts/{post_id}/share/timeline:
    post:
      summary: 'Share Post Timeline'
      description: 'Share post to timeline.'
      tags:
        - 'Posts'
      parameters:
        - name: 'post_id'
          in: 'path'
          schema:
            type: 'integer'
            example: 123
      responses:
        200:
          $ref: '#/components/responses/SharePostTimelineResponse'
      security:
        - BearerAuth: [ ]

  /users/me/change-password:
    post:
      summary: 'Password Change'
      description: 'Request password change.'
      tags:
        - 'Users Me'
      parameters:
        - name: 'current_password'
          in: 'query'
          schema:
            type: 'string'
            example: 'qwertY123'
        - name: 'new_password'
          in: 'query'
          schema:
            type: 'string'
            example: '123qwertY'
      responses:
        200:
          $ref: '#/components/responses/PasswordChangeResponse'
      security:
        - BearerAuth: [ ]

  /users/me/change-password/verify:
    post:
      summary: 'Password Change Verification'
      description: 'Verify password change.'
      tags:
        - 'Users Me'
      parameters:
        - name: 'current_password'
          in: 'query'
          schema:
            type: 'string'
            example: 'qwertY123'
        - name: 'new_password'
          in: 'query'
          schema:
            type: 'string'
            example: '123qwertY'
        - name: 'email_code'
          in: 'query'
          schema:
            type: 'integer'
            example: '123456'
      responses:
        200:
          $ref: '#/components/responses/VerifyPasswordChangeResponse'
      security:
        - BearerAuth: [ ]

  /users/timeline/search:
    get:
      summary: 'Search Current User Timeline'
      description: "Search posts on current user's timeline."
      tags:
        - 'Users'
      parameters:
        - name: 'search'
          in: 'query'
          schema:
            type: 'string'
            example: 'hello'
        - name: 'per_page'
          in: 'query'
          schema:
            type: 'integer'
            example: 10
      responses:
        200:
          $ref: '#/components/responses/SearchUserTimelinePosts'
      security:
        - BearerAuth: [ ]

  /users/{user_id}/timeline/search:
    get:
      summary: 'Search User Timeline'
      description: "Search posts on user's timeline."
      tags:
        - 'Users'
      parameters:
        - name: 'user_id'
          in: 'path'
          schema:
            type: 'integer'
            example: 123
        - name: 'search'
          in: 'query'
          schema:
            type: 'string'
            example: 'hello'
        - name: 'per_page'
          in: 'query'
          schema:
            type: 'integer'
            example: 10
      responses:
        200:
          $ref: '#/components/responses/SearchUserTimelinePosts'
      security:
        - BearerAuth: [ ]

  /users/me/sessions:
    get:
      summary: 'Get my Sessions'
      tags:
        - 'Me Sessions'
      responses:
        200:
          description: Response my sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: '#/components/schemas/UserSessionResponse'
      security:
        - BearerAuth: [ ]

  /users/me/sessions/{session_id}:
    delete:
      summary: Close User Session
      tags:
        - Me Sessions
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: integer
            example: 123
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - device_id
                - type
              properties:
                device_id:
                  type: string
                  example: "KV1QiLCJhbGciOi"
                type:
                  type: string
                  example: "api"
                  enum:
                    - "api"
                    - "web"
      responses:
        200:
          description: 'The response to the close user session request.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  message:
                    type: 'string'
                    example: 'Session successfully closed'
        400:
          description: "The current session can't be closed response to the close user session request."
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  error:
                    type: 'string'
                    example: 'Bad request'
                  message:
                    type: 'string'
                    example: "You're can't close your current session."
                  error_code:
                    type: 'integer'
                    example: -1400
        404:
          description: 'The session not found response to the close user session request.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  message:
                    type: 'string'
                    example: 'Entry for Models\\AuthRefreshToken not found'
                  error_code:
                    type: 'integer'
                    example: -1404
      security:
        - BearerAuth: [ ]

  /posts/{post_id}/report:
    post:
      summary: 'Post Report'
      description: 'Report post.'
      tags:
        - 'Post Report'
      parameters:
        - name: 'post_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 123
        - name: 'text'
          in: 'query'
          required: true
          schema:
            type: 'string'
            example: 'My report text 123'
            minLength: 4
            maxLength: 40
      responses:
        200:
          $ref: '#/components/responses/PostReportResponse'
      security:
        - BearerAuth: []

  /posts/{post_id}/report/withdraw:
    post:
      summary: 'Post Report Withdraw'
      description: 'Withdraw post report.'
      tags:
        - 'Post Report'
      parameters:
        - name: 'post_id'
          in: 'path'
          required: true
          schema:
            type: 'integer'
            example: 123
      responses:
        200:
          $ref: '#/components/responses/PostReportWithdrawResponse'
      security:
        - BearerAuth: []

  /users/me/notifications:
    get:
      summary: 'Get My Notifications Settings'
      description: 'Get current user notifications settings.'
      tags:
        - 'Users Me Notifications Settings'
      responses:
        200:
          $ref: '#/components/responses/UsersMeNotificationsSettingsResponse'
      security:
        - BearerAuth: []
    put:
      summary: 'Set My Notifications Settings'
      description: 'Set current user notifications settings.'
      tags:
        - 'Users Me Notifications Settings'
      parameters:
        - name: 'allow'
          in: 'query'
          required: true
          schema:
            type: 'string'
            enum:
              - 'yes'
              - 'no'
        - name: 'from'
          in: 'query'
          required: true
          schema:
            type: 'string'
            enum:
              - 'everyone'
              - 'followme'
              - 'onlyme'
        - name: 'sounds'
          in: 'query'
          required: true
          schema:
            type: 'string'
            enum:
              - 'on'
              - 'off'
      responses:
        200:
          $ref: '#/components/responses/UsersMeNotificationsSettingsResponse'
      security:
        - BearerAuth: []


components:
  schemas:
    UserSessionResponse:
      type: object
      properties:
        id:
          type: integer
          example: 95
        device_id:
          type: string
          example: "KV1QiLCJhbGciOi"
        platform:
          type: string
          example: "OS X"
        platform_version:
          type: string
          example: "10_15_7"
        browser:
          type: string
          example: "Chrome"
        browser_version:
          type: string
          example: "96.0.4664.110"
        ip_address:
          type: string
          example: "176.37.116.98"
          enum:
            - null
            - "176.37.116.98"
          nullable: true
        updated_at:
          type: integer
          example: 1642432554
        type:
          type: string
          example: "api"
          enum:
            - "web"
            - "api"
        is_active:
          type: boolean
          example: true
          enum:
            - true
            - false

    UserSessionsPaginateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                - $ref: '#/components/schemas/UserSessionResponse'

    CheckEmailResponse:
      description: Successful auth response
      type: object
      properties:
        message:
          type: string
          example: Done
        is_free:
          type: boolean
          example: true
          description: "If email free answer: `true` | If email not free answer: `false`"

    SavedArticleSchema:
      type: object
      properties:
        id:
          type: integer
          example: 34
        title:
          type: string
          example: "Title string"
        thumbnail:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/2020/04/8mmoNw2VGjN8EMP4VmhT_03_da8e604ed0d81ad9edc6676137fdf63c_image.png"
        category:
          type: object
          properties:
            id:
              type: integer
              example: 19
            name:
              type: string
              example: "Blockchain"
        created_at:
          type: integer
          example: 1634722166
        is_saved:
          type: boolean
          example: true
        owner:
          type: object
          properties:
            user_id:
              type: integer
              example: 3
            first_name:
              type: string
              example: "Mr"
            last_name:
              type: string
              example: "Johns"
            avatar:
              type: string
              example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/2020/04/8mmoNw2VGjN8EMP4VmhT_03_da8e604ed0d81ad9edc6676137fdf63c_image.png"
              enum:
                - null
                - "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/2020/04/8mmoNw2VGjN8EMP4VmhT_03_da8e604ed0d81ad9edc6676137fdf63c_image.png"

    BlockdeskSearchSchema:
      type: object
      properties:
        id:
          type: integer
          example: 15
        category:
          type: object
          properties:
            id:
              type: integer
              example: 12
            name:
              type: string
              example: "Blockchain"
        title:
          type: string
          example: "Blockchain Nike Air Force 1 Low P(Her)spective Coming Soon"
        thumbnail:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/2020/04/8mmoNw2VGjN8EMP4VmhT_03_da8e604ed0d81ad9edc6676137fdf63c_image.png"
        tags:
          type: array
          items:
            type: string
            example: "tag"
        created_at:
          type: integer
          example: 1634722166
        is_saved:
          type: boolean
          example: false
          enum:
            - true
            - false
        owner:
          type: object
          properties:
            user_id:
              type: integer
              example: 2
            first_name:
              type: string
              example: "Alex"
            last_name:
              type: string
              example: "Alexov"
            avatar:
              type: string
              example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/d-group.jpg"

    BlockdeskSearchPaginateSchema:
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/BlockdeskSearchSchema'

    BlockdeskCommentReplySchema:
      type: object
      properties:
        id:
          type: integer
          example: 24
        comment_id:
          type: integer
          example: 36
#        article_id:
#          type: integer
#          example: 20
        text:
          type: string
          example: "It is comment reply text"
        file:
          type: string
          example: null
          enum:
            - null
        created_at:
          type: integer
          example: 343434
#        updated_at:
#          type: integer
#          example: 343434
#          enum:
#            - 234423
#            - null
        likes_count:
          type: integer
          example: 34
          enum:
            - 0
            - 34
            - 45
        is_liked:
          type: boolean
          example: false
          enum:
            - true
            - false
        owner:
          type: object
          properties:
            user_id:
              type: integer
              example: 233
            first_name:
              type: string
              example: "Alex"
            last_name:
              type: string
              example: "Alexov"
            avatar:
              type: string
              example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/d-group.jpg"

    BlockdeskCommentReplyPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                - $ref: '#/components/schemas/BlockdeskCommentReplySchema'

    BlockdeskCommentSchema:
      type: object
      properties:
        id:
          type: integer
          example: 15
        article_id:
          type: integer
          example: 20
        text:
          type: string
          example: "It is blog text"
        file:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/files/FVfzB135RNqqkZvz2AiltkgDfzVK8Xf4.jpg"
        created_at:
          type: integer
          example: 1234354
        likes_count:
          type: integer
          example: 23
          enum:
            - 0
            - 23
        replies_count:
          type: integer
          example: 29
          enum:
            - 0
            - 29
        is_liked:
          type: boolean
          example: true
          enum:
            - true
            - false
        owner:
          type: object
          properties:
            user_id:
              type: integer
              example: 23
            first_name:
              type: string
              example: "Alex"
            last_name:
              type: string
              example: "Alexov"
            avatar:
              type: string
              example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/d-group.jpg"
        replies:
          type: array
          items:
            $ref: '#/components/schemas/BlockdeskCommentReplySchema'

    BlockdeskCommentPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                - $ref: '#/components/schemas/BlockdeskCommentSchema'

    BlockdeskArticleFollowingSchema:
      type: object
      properties:
        id:
          type: integer
          example: 15
        top_image:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/d-group.jpg"
        category_id:
          type: integer
          example: 20
        category:
          type: object
          properties:
            id:
              type: integer
              example: 12
            name:
              type: string
              example: "Blockchain"
        title:
          type: string
          example: "It is blog text"
        owner_id:
          type: integer
          example: 20
        created_at:
          type: integer
          example: 1631800643
        is_saved:
          type: boolean
          example: false
        owner:
          type: object
          properties:
            user_id:
              type: integer
              example: 23
            first_name:
              type: string
              example: "Alex"
            last_name:
              type: string
              example: "Alexov"
            avatar:
              type: string
              example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/d-group.jpg"

    BlockdeskArticleFollowingPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                - $ref: '#/components/schemas/BlockdeskArticleFollowingSchema'

    GroupAdminPermissionResource:
      type: object
      properties:
        user_id:
          type: integer
          example: 5
        group_id:
          type: integer
          example: 86
        privilege_settings:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
                example: "general"
              value:
                type: boolean
                example: false

    PostOwner:
      type: object
      properties:
        user_id:
          type: integer
          example: 1227
        username:
          type: string
          example: "username"
        first_name:
          type: string
          example: "Alex"
        last_name:
          type: string
          example: "Kotikov"
        avatar:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/3l6IG4BKbbHceRzgiTrlEIaNUbyfu2NW.jpg"

    GroupAdminResource:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        username:
          type: string
          example: "username"
        first_name:
          type: string
          example: "Alex"
        last_name:
          type: string
          example: "Ivanov"
        avatar:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/3l6IG4BKbbHceRzgiTrlEIaNUbyfu2NW.jpg"
          enum:
            - null
            - "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/3l6IG4BKbbHceRzgiTrlEIaNUbyfu2NW.jpg"

    GroupMemberResource:
      type: object
      properties:
        user_id:
          type: string
          example: 1727
        username:
          type: string
          example: "username"
        first_name:
          type: string
          example: "Alex"
        last_name:
          type: string
          example: "Petrov"
        avatar:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/3l6IG4BKbbHceRzgiTrlEIaNUbyfu2NW.jpg"
          enum:
            - null
            - "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/3l6IG4BKbbHceRzgiTrlEIaNUbyfu2NW.jpg"
        email:
          type: string
          example: "alex@gmail.com"
        is_owner:
          type: boolean
          example: true
        is_admin:
          type: boolean
          example: false
        is_joined:
          type: boolean
          example: true
        is_requested:
          type: boolean
          example: false

    FollowResource:
      type: object
      properties:
        user_id:
          type: integer
          example: 1727
        username:
          type: string
          example: "username"
        first_name:
          type: string
          example: "Alex"
        last_name:
          type: string
          example: "Petrov"
        avatar:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/3l6IG4BKbbHceRzgiTrlEIaNUbyfu2NW.jpg"
          enum:
            - null
            - "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/3l6IG4BKbbHceRzgiTrlEIaNUbyfu2NW.jpg"

    FollowCursorPaginateSchema:
      allOf:
        - $ref: '#/components/schemas/BaseCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/FollowResource'

    GroupMemberCursorPaginateSchema:
      allOf:
        - type: object
          properties:
            members_count:
              type: integer
              example: 1
              enum:
                - 0
                - 1
                - 100
        - $ref: '#/components/schemas/BaseCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/GroupMemberResource'


    UserCreatedGroupCursorPaginateSchema:
      allOf:
        - $ref: '#/components/schemas/BaseCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/UserCreatedGroupResource'

    GroupJoinResource:
      properties:
        id:
          type: integer
          example: 1
        group_slug:
          type: string
          example: "Community"
        group_title:
          type: string
          example: "Bozas Group"
        category:
          $ref: '#/components/schemas/GroupCategorySub'
        privacy:
          type: boolean
          example: true
        member_count:
          type: integer
          example: 10
        is_owner:
          type: boolean
          example: true
        is_admin:
          type: boolean
          example: false
        is_joined:
          type: boolean
          example: true
        is_requested:
          type: boolean
          example: false

    GroupResource:
      properties:
        id:
          type: integer
          example: 1
        owner_id:
          type: integer
          example: 2
        group_slug:
          type: string
          example: "Community"
        group_title:
          type: string
          example: "Bozas Group"
        avatar:
          $ref: '#/components/schemas/file_path'
        cover:
          $ref: '#/components/schemas/file_path'
        privacy:
          type: boolean
          example: true
        about:
          type: string
          example: "his is just a test 1"
        category:
          $ref: '#/components/schemas/GroupCategorySub'
        join_privacy:
          type: boolean
          example: false
        active:
          type: boolean
          example: true
        members_count:
          type: integer
          example: 207
          enum:
            - 0
            - 24
        is_owner:
          type: boolean
          example: true
        is_admin:
          type: boolean
          example: true
        is_joined:
          type: boolean
          example: true
        is_requested:
          type: boolean
          example: true
#        setting:
#          $ref: '#/components/schemas/GroupAdditionalDataResource'

    GroupWithSettingsPermissionsResource:
      properties:
        id:
          type: integer
          example: 1
        owner_id:
          type: integer
          example: 2
        group_slug:
          type: string
          example: "Community"
        group_title:
          type: string
          example: "Bozas Group"
        avatar:
          $ref: '#/components/schemas/file_path'
        cover:
          $ref: '#/components/schemas/file_path'
        privacy:
          type: boolean
          example: true
        about:
          type: string
          example: "his is just a test 1"
        category:
          $ref: '#/components/schemas/GroupCategorySub'
#        join_privacy:
#          type: boolean
#          example: false
        active:
          type: boolean
          example: true
        members_count:
          type: integer
          example: 207
          enum:
            - 0
            - 24
        is_owner:
          type: boolean
          example: true
        is_admin:
          type: boolean
          example: true
        is_joined:
          type: boolean
          example: true
        is_requested:
          type: boolean
          example: true
        setting:
          $ref: '#/components/schemas/GroupAdditionalDataResource'
        permissions:
          $ref: '#/components/schemas/GroupAdminPermissionResource'

    GroupSearchResource:
      properties:
        id:
          type: integer
          example: 1
        owner_id:
          type: integer
          example: 2
        group_name:
          type: string
          example: "Community"
        group_title:
          type: string
          example: "Bozas Group"
        about:
          type: string
          example: "his is just a test 1"
        category:
          $ref: '#/components/schemas/GroupCategorySub'
        avatar:
          $ref: '#/components/schemas/file_path'
        cover:
          $ref: '#/components/schemas/file_path'
        privacy:
          type: boolean
          example: true
        join_privacy:
          type: boolean
          example: false
        active:
          type: boolean
          example: true
        is_owner:
          type: boolean
          example: true
        is_admin:
          type: boolean
          example: true
        is_joined:
          type: boolean
          example: true
        is_requested:
          type: boolean
          example: true

    GroupSuggestionResource:
      properties:
        id:
          type: integer
          example: 1
        group_slug:
          type: string
          example: "Community"
        group_title:
          type: string
          example: "Bozas Group"
        avatar:
          $ref: '#/components/schemas/file_path'
        cover:
          $ref: '#/components/schemas/file_path'
        privacy:
          type: boolean
          example: true
        category:
          $ref: '#/components/schemas/GroupCategorySub'
        members_count:
          type: integer
          example: 10
          enum:
            - 0
            - 10
            - 15
        is_owner:
          type: boolean
          example: true
        is_admin:
          type: boolean
          example: true
        is_joined:
          type: boolean
          example: true
        is_requested:
          type: boolean
          example: true

    GroupJoinedResource:
      properties:
        id:
          type: integer
          example: 1
        owner_id:
          type: integer
          example: 15
        group_slug:
          type: string
          example: "Community"
        group_title:
          type: string
          example: "Bozas Group"
        avatar:
          $ref: '#/components/schemas/file_path'
        cover:
          $ref: '#/components/schemas/file_path'
        privacy:
          type: boolean
          example: true
        category:
          $ref: '#/components/schemas/GroupCategorySub'
        members_count:
          type: integer
          example: 10
          enum:
            - 0
            - 10
            - 15
        is_owner:
          type: boolean
          example: true
        is_admin:
          type: boolean
          example: true
        is_joined:
          type: boolean
          example: true
        is_requested:
          type: boolean
          example: true

    GroupRequestMemberResource:
      title: Group Requset Member Title
      description: Group Requset Member desc
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/numeric_key_serial'
        username:
          $ref: '#/components/schemas/string'
        email:
          $ref: '#/components/schemas/email_type'
        first_name:
          $ref: '#/components/schemas/string'
        last_name:
          $ref: '#/components/schemas/string'
        avatar:
          $ref: '#/components/schemas/file_path'

    GroupRequestMemberActionResource:
      title: Group Requset Member Title
      description: Group Requset Member desc
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/numeric_key_serial'
        request:
          type: string
          example: "accept"
          enum:
            - "accept"
            - "decline"
            - "user already member"
            - "user did't request"

    UserCreatedGroupResource:
      properties:
        id:
          type: integer
          example: 1
        owner_id:
          type: integer
          example: 2
        group_slug:
          type: string
          example: "Community"
        group_title:
          type: string
          example: "Bozas Group"
        about:
          type: string
          example: "his is just a test 1"
        category:
          $ref: '#/components/schemas/GroupCategorySub'
        avatar:
          $ref: '#/components/schemas/file_path'
        cover:
          $ref: '#/components/schemas/file_path'
        privacy:
          type: boolean
          example: true
        join_privacy:
          type: boolean
          example: false
        active:
          type: boolean
          example: true
#        registered:
#          type: string
#          example: "0/0000"
        members_count:
          type: integer
          example: 5
          enum:
            - 0
            - 18
        is_owner:
          type: boolean
          example: true
        is_admin:
          type: boolean
          example: true
        is_joined:
          type: boolean
          example: true
        is_requested:
          type: boolean
          example: true

    GroupAdditionalDataResource:
      properties:
        phone:
          type: string
          example: "+380951234567"
        email:
          type: string
          example: "test@gmail.com"
        website:
          type: string
          example: "https://jsonformatter.org/"
        location:
          type: string
          example: "Ukrainstan"
        facebook:
          type: string
          example: "https://facebook.com/facebook"
        instagram:
          type: string
          example: "https://instagram.com/instagram"
        twitter:
          type: string
          example: "https://twitter.com/twitter"
        vkontakte:
          type: string
          example: "https://vk.com/vkontakte"
        youtube:
          type: string
          example: "https://youtube.com/youtube"
        linkedin:
          type: string
          example: "https://linkedin.com/linkedin"

    GroupCategory:
      type: object
      properties:
        id:
          type: integer
          example: 4
        name:
          type: string
          example: "Economy"
        image:
          type: string
          example: null
        sub:
          $ref: '#/components/schemas/GroupCategorySub'

      ArticleCategory:
        type: object
        properties:
          id:
            type: integer
            example: 4
          name:
            type: string
            example: "Economy"

    GroupCategorySub:
      title: Group Category model
      description: Group Category model
      type: object
      properties:
        id:
          $ref: '#/components/schemas/numeric_key_serial'
        name:
          $ref: '#/components/schemas/string'
        image:
          $ref: '#/components/schemas/string'
        sub:
          type: object

    numeric_key_serial:
      format: int64
      description: The unique identifier of a record
      type: integer
      example: '1123'
    bcrypt_hash:
      format: token
      description: BCrypt hash
      type: string
      example: $2y$10$.d7lNro8WXak8ThYAiq.0uZCUO9E6eRJQRw79P8g7tq2KstUBqmWS
    string:
      description: 'Regular string, with no restrictions'
      type: string
      example: SomeString
    number_type:
      format: float
      description: 'Regular string, with no restrictions'
      default: '0'
      type: string
      example: '0.00'
    boolean_type:
      description: 'Regular string, with no restrictions'
      default: '0'
      type: boolean
      example: '0'
    email_type:
      description: Email type
      type: string
      example: some_email@example.com
    file_path:
      description: Regular relative path to file
      type: string
      example: https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/d-group.jpg
    website_url:
      description: Sample website
      type: string
      example: 'https://somesite.domain/path'
    serialized_json:
      description: JSON serialized to string
      type: string
      example: '{”somekey”: ”someval”}'
    date:
      description: Date with year-month-day format
      type: string
      example: '1990-21-12'
    status:
      description: Status representation
      type: string
      example: '0'
    unix_timestamp:
      format: int32
      description: 'Date, represented as unix timestamp'
      default: 0
      type: integer
      example: 1620833869
    notification_settings_type:
      description: Some weird serialize. Dunno what's for.
      default:
        e_liked: 1
        e_shared: 1
        e_wondered: 0
        e_commented: 1
        e_followed: 1
        e_accepted: 1
        e_mentioned: 1
        e_joined_group: 1
        e_liked_page: 1
        e_visited: 1
        e_profile_wall_post: 1
        e_memory: 1
      type: string
      example:
        e_liked: 1
        e_shared: 1
        e_wondered: 0
        e_commented: 1
        e_followed: 1
        e_accepted: 1
        e_mentioned: 1
        e_joined_group: 1
        e_liked_page: 1
        e_visited: 1
        e_profile_wall_post: 1
        e_memory: 1
    phone_type:
      description: Some weird serialize. Dunno what's for.
      default: ''
      type: string
      example: '+310203222718'
    user_details_type:
      description: Some weird serialize. Dunno what's for.
      default:
        post_count: 0
        album_count: 0
        following_count: 0
        followers_count: 0
        groups_count: 0
        likes_count: 0
      type: string
      example:
        post_count: 0
        album_count: 0
        following_count: 0
        followers_count: 0
        groups_count: 0
        likes_count: 0
    UserModel:
      title: User model
      description: User model
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/numeric_key_serial'
        username:
          $ref: '#/components/schemas/string'
        email:
          $ref: '#/components/schemas/email_type'
        first_name:
          $ref: '#/components/schemas/string'
        last_name:
          $ref: '#/components/schemas/string'
        avatar:
          $ref: '#/components/schemas/file_path'
        cover:
          $ref: '#/components/schemas/file_path'
        about:
          $ref: '#/components/schemas/string'
        country_id:
          $ref: '#/components/schemas/numeric_key_serial'
        website:
          $ref: '#/components/schemas/website_url'
        location:
          type: string
          example: "4984549"
        verified:
          type: string
          example: "Verified"
          enum:
            - "Verified"
            - "Not verified"
          description: not update, only view
        role:
          type: string
          example: 'article_author'
        country:
          $ref: '#/components/schemas/Country'
        field:
          $ref: '#/components/schemas/UserFields'
        is_friend:
          $ref: '#/components/schemas/IsFriendPropertySchema'

    UserMeSchema:
      title: User model
      description: User model
      type: object
      properties:
        user_id:
          type: integer
          example: 1727
        username:
          type: string
          example: "userName"
        email:
          type: string
          example: "somemail@gmail.com"
        first_name:
          type: string
          example: "Alex"
        last_name:
          type: string
          example: "Petrovich"
        avatar:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/d-group.jpg"
        cover:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/d-group.jpg"
        about:
          $ref: '#/components/schemas/string'
        gender:
          type: string
          example: "male"
          enum:
            - "male"
            - "female"
        birthday:
          type: string
          example: "2021-12-31"
        country_id:
          type: integer
          example: 4
        phone_number:
          type: string
          example: "095561614984"
        followers_count:
          type: integer
          example: 10
        followings_count:
          type: integer
          example: 15
        role:
          type: string
          example: 'article_author'
        url:
          type: string
          example: 'https://dev.blockster.com/MyUsername'
        phone_number_code:
          type: integer
          example: 993
        website:
          type: string
          example: "https://somesite.domain/path"
        location:
          type: string
          example: "4984549"
        verified:
          type: string
          example: "Verified"
          enum:
            - "Verified"
            - "Not verified"
        country:
          $ref: '#/components/schemas/Country'
        field:
          $ref: '#/components/schemas/UserFields'

    UserMeUpdatedSchema:
      title: User model
      description: User model
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "Alex"
        last_name:
          type: string
          example: "Petrov"
        username:
          type: string
          example: "username"
        email:
          type: string
          example: "alex@gmail.com"
        gender:
          type: string
          example: "male"
          enum:
            - "male"
            - "female"
            - "other"
        birthday:
          type: string
          example: "0000-00-00"
        about:
          type: string
          example: "It is About text It is About text It is About text It is About text"
        location:
          type: string
          example: "0"
        website:
          type: string
          example: "https://example.com"
          enum:
            - "https://example.com"
            - ""
        avatar:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/files/Vp7k5Q1fWG9bwFylb8ZFVWhUa01L0xEF.jpg"
          nullable: true
        cover:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/files/Vp7k5Q1fWG9bwFylb8ZFVWhUa01L0xEF.jpg"
          nullable: true
        country:
          $ref: '#/components/schemas/Country'
        field:
          $ref: '#/components/schemas/UserFields'


    UserMePrivacySchema:
      title: User Privacy model
      description: User Privacy model
      type: object
      properties:
        follow_privacy:
          type: string
          example: everyone
          enum:
            - everyone
            - ifollow
        message_privacy:
          type: string
          example: everyone
          enum:
            - everyone
            - ifollow
            - nobody
        friend_privacy:
          type: string
          example: everyone
          enum:
            - everyone
            - ifollow
            - nobody
            - followme
        post_privacy:
          type: string
          example: everyone
          enum:
            - everyone
            - ifollow
            - nobody
        confirm_followers:
          type: string
          example: no
          enum:
            - no
            - yes
        group_chat_privacy:
          type: string
          example: no
          enum:
            - no
            - yes
        show_activities_privacy:
          type: string
          example: no
          enum:
            - no
            - yes
        status:
          type: string
          example: offline
          enum:
            - offline
            - online
        share_my_location:
          type: string
          example: no
          enum:
            - no
            - yes
        share_my_data:
          type: string
          example: no
          enum:
            - no
            - yes

    UserMeUpdateSchema:
      title: User model
      description: User model
      type: object
      properties:
        user_id:
          type: integer
          example: 1727
        username:
          type: string
          example: "userName"
        email:
          type: string
          example: "somemail@gmail.com"
        first_name:
          type: string
          example: "Alex"
        last_name:
          type: string
          example: "Petrovich"
        avatar:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/d-group.jpg"
        cover:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/d-group.jpg"
        about:
          $ref: '#/components/schemas/string'
        gender:
          type: string
          example: "male"
          enum:
            - "male"
            - "female"
        birthday:
          type: string
          example: "2021-12-31"
        country_id:
          type: integer
          example: 4
        phone_number:
          type: string
          example: "095561614984"
        phone_number_code:
          type: integer
          example: 993
        website:
          type: string
          example: "https://somesite.domain/path"
        location:
          type: string
          example: "4984549"
        country:
          $ref: '#/components/schemas/Country'
        field:
          $ref: '#/components/schemas/UserFields'

    UserFollower:
      title: User model
      description: User model
      type: object
      properties:
        user_id:
          $ref: '#/components/schemas/numeric_key_serial'
        username:
          $ref: '#/components/schemas/string'
        first_name:
          $ref: '#/components/schemas/string'
        last_name:
          $ref: '#/components/schemas/string'
        avatar:
          $ref: '#/components/schemas/file_path'
        email:
          type: string
          example: "alex@gmail.com"

    UserFields:
      type: object
      properties:
        position:
          type: string
          example: "Developer"

    ChatModel:
      title: Chat model
      description: Chat model
      type: object
      properties:
        group_id:
          $ref: '#/components/schemas/numeric_key_serial'
        user_id:
          $ref: '#/components/schemas/numeric_key_serial'
        group_slug:
          $ref: '#/components/schemas/string'
        avatar:
          $ref: '#/components/schemas/file_path'
        time:
          $ref: '#/components/schemas/unix_timestamp'
    Comment:
      title: Comment model
      description: Comment model
      type: object
      properties:
        id:
          $ref: '#/components/schemas/numeric_key_serial'
        user_id:
          $ref: '#/components/schemas/numeric_key_serial'
        page_id:
          $ref: '#/components/schemas/numeric_key_serial'
        post_id:
          $ref: '#/components/schemas/numeric_key_serial'
        text:
          $ref: '#/components/schemas/string'
        record:
          $ref: '#/components/schemas/string'
        file:
          $ref: '#/components/schemas/file_path'
        time:
          $ref: '#/components/schemas/unix_timestamp'
    CommentReply:
      title: CommentReply model
      description: CommentReply model
      type: object
      properties:
        id:
          $ref: '#/components/schemas/numeric_key_serial'
        user_id:
          $ref: '#/components/schemas/numeric_key_serial'
        page_id:
          $ref: '#/components/schemas/numeric_key_serial'
        comment_id:
          $ref: '#/components/schemas/numeric_key_serial'
        text:
          $ref: '#/components/schemas/string'
        file:
          $ref: '#/components/schemas/file_path'
        time:
          $ref: '#/components/schemas/unix_timestamp'

    Country:
      title: Country
      description: Country
      type: object
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/numeric_key_serial'
        iso:
          # $ref: '#/components/schemas/string'
          type: string
          example: "TM"
        name:
          # $ref: '#/components/schemas/string'
          type: string
          example: "UKRAINISTAN"
        nicename:
          # $ref: '#/components/schemas/string'
          type: string
          example: "Ukrainistan"
        iso3:
          # $ref: '#/components/schemas/string'
          type: string
          example: "TKM"
        numcode:
          # $ref: '#/components/schemas/string'
          type: integer
          example: 795
        phonecode:
          # $ref: '#/components/schemas/string'
          type: integer
          example: 993
    Follower:
      title: Follower model
      description: Follower model
      type: object
      properties:
        id:
          $ref: '#/components/schemas/numeric_key_serial'
        following_id:
          $ref: '#/components/schemas/numeric_key_serial'
        follower_id:
          $ref: '#/components/schemas/numeric_key_serial'
        is_typing:
          $ref: '#/components/schemas/boolean_type'
        active:
          $ref: '#/components/schemas/string'
        notify:
          $ref: '#/components/schemas/boolean_type'
        time:
          $ref: '#/components/schemas/unix_timestamp'
    GroupChatAdmin:
      title: GroupChatAdmin model
      description: GroupChatAdmin model
      type: object
      properties:
        GroupChatID:
          $ref: '#/components/schemas/numeric_key_serial'
        UserID:
          $ref: '#/components/schemas/numeric_key_serial'
      example:
        GroupChatID: 123
        UserID: 321
    GroupChatUser:
      title: GroupChatAdmin model
      description: GroupChatAdmin model
      type: object
      properties:
        id:
          $ref: '#/components/schemas/numeric_key_serial'
        user_id:
          $ref: '#/components/schemas/numeric_key_serial'
        group_id:
          $ref: '#/components/schemas/numeric_key_serial'
        active:
          $ref: '#/components/schemas/boolean_type'
        last_seen:
          $ref: '#/components/schemas/unix_timestamp'
    Like:
      title: Like model
      description: Like model
      type: object
      properties:
        id:
          $ref: '#/components/schemas/numeric_key_serial'
        user_id:
          $ref: '#/components/schemas/numeric_key_serial'
        post_id:
          $ref: '#/components/schemas/numeric_key_serial'

    FeedResource:
      type: object
      properties:
        post_id:
          type: integer
          example: 393
        post_text:
          type: string
          example: "Creaated post"
        post_link:
          type: string
          example: ""
        post_photos:
          type: array
          items:
            type: string
            example: "upload/photos/JTvobPkFLld4mxMe2xOBUrCnfwEMbjfE.jpg"
          example:
            - "upload/photos/JTvobPkFLld4mxMe2xOBUrCnfwEMbjfE.jpg"
            - "upload/photos/RYRupo8P3kH8PXPK6XAYtGXkXeZ3qxmo.jpg"
        time:
          $ref: '#/components/schemas/unix_timestamp'
        likes_count:
          type: integer
          example: 10
          enum:
            - 5
            - 0
        comments_count:
          type: integer
          example: 393
          enum:
            - 10
            - 0
        is_liked:
          type: boolean
          example: false
        user:
          $ref: '#/components/schemas/FeedUserResource'

    FeedUserResource:
      type: object
      properties:
        user_id:
          type: integer
          example: 1727
        username:
          type: string
          example: "Testввв_Testov40"
        first_name:
          type: string
          example: "Testввв"
        last_name:
          type: string
          example: "last_name"
        avatar:
          type: string
          example: "upload/photos/d-avatar.svg"
        verified:
          type: boolean
          example: true
        lastseen:
          $ref: '#/components/schemas/unix_timestamp'

    Post:
      title: Post model
      description: Post model
      type: object
      properties:
        id:
          $ref: '#/components/schemas/numeric_key_serial'
        post_id:
          $ref: '#/components/schemas/numeric_key_serial'
        user:
          $ref: '#/components/schemas/UserModel'
        recipient_id:
          $ref: '#/components/schemas/numeric_key_serial'
        post_text:
          $ref: '#/components/schemas/string'
        page_id:
          $ref: '#/components/schemas/numeric_key_serial'
        group_id:
          $ref: '#/components/schemas/numeric_key_serial'
        event_id:
          $ref: '#/components/schemas/numeric_key_serial'
        #        page_event_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        post_link:
          $ref: '#/components/schemas/website_url'
        #        postLinkTitle:
        #          $ref: '#/components/schemas/string'
        #        postLinkImage:
        #          $ref: '#/components/schemas/file_path'
        #        postLinkContent:
        #          $ref: '#/components/schemas/website_url'
        #        postVimeo:
        #          $ref: '#/components/schemas/website_url'
        #        postDailymotion:
        #          $ref: '#/components/schemas/website_url'
        #        postFacebook:
        #          $ref: '#/components/schemas/website_url'
        #        post_file:
        #          $ref: '#/components/schemas/file_path'
        #        postFileName:
        #          $ref: '#/components/schemas/string'
        #        postFileThumb:
        #          $ref: '#/components/schemas/string'
        #        postYoutube:
        #          $ref: '#/components/schemas/website_url'
        #        postVine:
        #          $ref: '#/components/schemas/website_url'
        #        postSoundCloud:
        #          $ref: '#/components/schemas/website_url'
        #        postPlaytube:
        #          $ref: '#/components/schemas/website_url'
        #        postDeepsound:
        #          $ref: '#/components/schemas/website_url'
        #        postMap:
        #          $ref: '#/components/schemas/string'
        #        postShare:
        #          $ref: '#/components/schemas/website_url'
        post_privacy:
          $ref: '#/components/schemas/string'
        #        postType:
        #          $ref: '#/components/schemas/string'
        #        postFeeling:
        #          $ref: '#/components/schemas/string'
        #        postListening:
        #          $ref: '#/components/schemas/string'
        #        postTraveling:
        #          $ref: '#/components/schemas/string'
        #        postWatching:
        #          $ref: '#/components/schemas/string'
        #        postPlaying:
        #          $ref: '#/components/schemas/string'
        post_photos:
          type: array
          example:
            - 'upload/photos/uKSLiZ8RvbD4kfTXbnHdy5SwBseom2S2.jpg'
            - 'upload/photos/uKSLiZ8RvbD4kfTXbnHdy5SwBseom2S2.jpg'
        vide_post:
          type: string
          example: 'upload/photos/viuKSLiZ8RvbD4kfTXbnHdy5SwBseom2S2.jpg'
        time:
          $ref: '#/components/schemas/unix_timestamp'
        #        registered:
        #          $ref: '#/components/schemas/unix_timestamp'
        #        album_name:
        #          $ref: '#/components/schemas/string'
        #        multi_image:
        #          $ref: '#/components/schemas/boolean_type'
        #        multi_image_post:
        #          $ref: '#/components/schemas/boolean_type'
        #        boosted:
        #          $ref: '#/components/schemas/boolean_type'
        #        product_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        poll_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        blog_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        forum_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        thread_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        videoViews:
        #          format: int32
        #          type: integer
        #        postRecord:
        #          $ref: '#/components/schemas/string'
        #        postSticker:
        #          $ref: '#/components/schemas/string'
        #        shared_from:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        post_url:
        #          $ref: '#/components/schemas/website_url'
        #        parent_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        cache:
        #          $ref: '#/components/schemas/boolean_type'
        #        comments_status:
        #          $ref: '#/components/schemas/boolean_type'
        #        blur:
        #          $ref: '#/components/schemas/boolean_type'
        #        color_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        job_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        offer_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        fund_raise_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        fund_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        active:
        #          $ref: '#/components/schemas/boolean_type'
        #        stream_name:
        #          $ref: '#/components/schemas/string'
        #        live_time:
        #          $ref: '#/components/schemas/unix_timestamp'
        #        live_ended:
        #          $ref: '#/components/schemas/unix_timestamp'
        #        agora_resource_id:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        agora_sid:
        #          $ref: '#/components/schemas/numeric_key_serial'
        #        send_notify:
        #          $ref: '#/components/schemas/boolean_type'
        #        enable_notifications:
        #          $ref: '#/components/schemas/boolean_type'
        #        shared_from:
        #          type: object
        #          description: self-reference Post
        #          example: self-reference Post
        likes_count:
          type: integer
          example: 5
        comments_count:
          type: integer
          example: 10
        is_liked:
          type: boolean
          example: true
        created_at:
          type: string
          example: "2021-08-09 14:01:41"
    Reaction:
      title: Post model
      description: Post model
      type: object
      properties:
        id:
          $ref: '#/components/schemas/numeric_key_serial'
        user_id:
          $ref: '#/components/schemas/numeric_key_serial'
        post_id:
          $ref: '#/components/schemas/numeric_key_serial'
        comment_id:
          $ref: '#/components/schemas/numeric_key_serial'
        replay_id:
          $ref: '#/components/schemas/numeric_key_serial'
        reaction:
          $ref: '#/components/schemas/numeric_key_serial'

    GroupCategoryResource:
      title: Group Category model
      description: Group Category model
      type: object
      properties:
        id:
          $ref: '#/components/schemas/numeric_key_serial'
        name:
          $ref: '#/components/schemas/string'
        image:
          $ref: '#/components/schemas/string'
        sub:
          $ref: '#/components/schemas/GroupCategoryResourceSub'

    GroupCategoryResourceSub:
      title: Group Category model
      description: Group Category model
      type: object
      properties:
        id:
          $ref: '#/components/schemas/numeric_key_serial'
        name:
          $ref: '#/components/schemas/string'
        image:
          $ref: '#/components/schemas/string'
        sub:
          type: object

    GroupCategoryResourceList:
      title: Group Categories list
      description: Group Categories list
      type: array
      items:
        $ref: '#/components/schemas/GroupCategoryResource'

    ArticleCategoryResource:
      title: Article Category model
      description: Article Category model
      type: object
      properties:
        id:
          $ref: '#/components/schemas/numeric_key_serial'
        name:
          $ref: '#/components/schemas/string'

    ArticleCategoryResourceList:
      title: Article Categories list
      description: Article Categories list
      type: array
      items:
        $ref: '#/components/schemas/ArticleCategoryResource'

    AuthSuccessResponse:
      description: Successful auth response
      type: object
      properties:
        access_token:
          $ref: '#/components/schemas/bcrypt_hash'
        token_type:
          $ref: '#/components/schemas/string'
        refresh_token:
          type: string
        expires_in:
          $ref: '#/components/schemas/unix_timestamp'
      example:
        access_token: >-
          eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODA4MlwvdjFcL2F1dGgiLCJpYXQiOjE2MjAzMzY5NzAsImV4cCI6MTYyMDM0MDU3MCwibmJmIjoxNjIwMzM2OTcwLCJqdGkiOiJxb0lJOGZCR002b0xJZGhEIiwic3ViIjoxNjY3LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.7kQxPUH5OlckaFRgG9Ub1VwbiueJ5ddb0xTJjiEEKbg
        token_type: bearer
        refresh_token: "ef5c821993cfbee0621ddb39dfb521d1fefdaae5"
        expires_in: 216000

    FollowersCursorPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/FollowerUserSchema'
            followers_count:
              type: integer
              example: 10

    FollowerUserSchema:
      type: object
      properties:
        user_id:
          type: integer
          example: 123
        first_name:
          type: string
          example: 'Joe'
        last_name:
          type: string
          example: 'Doe'
        avatar:
          type: string
          example: '/upload/photos/2021/03/UWBU9HPNcT4BroAxj1ij_29_58ea77e448133f004a6bf37f9fe9b48d_avatar.png'
        is_friend:
          $ref: '#/components/schemas/IsFriendPropertySchema'

    FollowersSearchCursorPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/FollowerUserSearchSchema'

    FollowerUserSearchSchema:
      type: object
      properties:
        user_id:
          type: integer
          example: 123
        first_name:
          type: string
          example: 'Joe'
        last_name:
          type: string
          example: 'Doe'
        username:
          type: string
          example: 'BoPe86'
        avatar:
          type: string
          example: ' https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/2021/03/avatar.png'
        is_friend:
          type: string
          example: 'requested'
          enum:
            - 'following'
            - 'requested'
            - 'follow'
        role:
          type: string
          example: 'user'
          enum:
            - 'user'
            - 'admin'
            - 'moderator'
            - 'sales'
            - 'article_author'
            - 'business_developer'



    FollowedCursorPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/FollowedUserSchema'
            followings_count:
              type: integer
              example: 10

    FollowedUserSchema:
      type: object
      properties:
        user_id:
          type: integer
          example: 123
        first_name:
          type: string
          example: 'Joe'
        last_name:
          type: string
          example: 'Doe'
        avatar:
          type: string
          example: '/upload/photos/2021/03/UWBU9HPNcT4BroAxj1ij_29_58ea77e448133f004a6bf37f9fe9b48d_avatar.png'
        is_friend:
          $ref: '#/components/schemas/IsFriendPropertySchema'

    GetFollowingResponse:
      description: Get following response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserModel'
    GetDiscoverResponse:
      description: Get discover response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserModel'
    GetChatsResponse:
      description: Successful auth response
      type: object
      properties:
        status:
          type: string
          example: ok

    UploadImageResponse:
      type: object
      properties:
        avatar:
          type: string
          example: "http://127.0.0.1:8082/upload/photos/zcrZyHIoAj32YUKwCz8hncRW6ltwlYUA.jpg"
        cover:
          type: string
          example: "http://127.0.0.1:8082/upload/photos/9VWhXHeRsnmMOzq9L41DIP28H9LRn5Tq.jpg"

    SendVerifyResponse:
      description: Successful auth response
      type: object
      properties:
        message:
          type: string
          example: New verification code was sent
    GenerateRestorePasswordResponse:
      description: Successful auth response
      type: object
      properties:
        message:
          type: string
          example: Password change request was sent
    SubmitRestorePasswordResponse:
      description: Successful auth response
      type: object
      properties:
        message:
          type: string
          example: email_code is valid
    OperationSuccessfulResponse:
      description: Successful auth response
      type: object
      properties:
        status:
          type: string
          example: ok

    PostResource:
      type: object
      properties:
        post_id:
          type: integer
          example: 333
        post_text:
          type: string
          example: "Is is Post text"
        post_privacy:
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
          description: "`0 - everyone` `1 - people I follow` `2 - people follow me` `3 - only me`"
        post_link:
          type: string
          example: ""
        created_at:
          $ref: '#/components/schemas/unix_timestamp'
        likes_count:
          type: integer
          example: 5
          enum:
            - 0
            - 51
        is_liked:
          type: boolean
          example: true
          enum:
            - false
            - true
        comments_count:
          type: integer
          example: 2
          enum:
            - 0
            - 54
        url:
          type: string
          example: 'https://blockster.com/post/333'
        attachments:
          type: array
          items:
            type: object
            required:
              - post_text
              - post_privacy
            properties:
              url:
                type: string
                example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/files/pvN6N4d9P1shu9NbyMOtTc3SRUgSZraV.jpg"
              with:
                type: integer
                example: 240
                enum:
                  - 240
                  - null
              height:
                type: integer
                example: 250
                enum:
                  - 240
                  - null
              mime_type:
                type: string
                example: "image/jpeg"
                enum:
                  - "image/jpeg"
                  - "image/png"
                  - "image/gif"
                  - "application/zip"
        service_gif:
          type: object
          properties:
            url:
              type: string
              example: "https://media2.giphy.com/media/VVh7txo37uooM/200.gif?cid=b4114d90ym4bbif3jg0ylslhb981r87d914wnlvhv9np4atd&rid=200.gif&ct=g"
            with:
              type: integer
              example: 267
            height:
              type: integer
              example: 200
            mime_type:
              type: string
              example: "image/gif"
          nullable: true
        owner:
          $ref: '#/components/schemas/PostOwner'
        comments_status:
          type: boolean
          example: true
        parent:
          $ref: '#/components/schemas/ParentPostResource'
        is_reported:
          type: boolean
          example: true

    ParentPostResource:
      type: object
      nullable: true
      properties:
        post_id:
          type: integer
          example: 333
        post_text:
          type: string
          example: "Is is Post text"
        post_privacy:
          type: integer
          enum:
            - 0
            - 1
            - 2
            - 3
          description: "`0 - everyone` `1 - people I follow` `2 - people follow me` `3 - only me`"
        post_link:
          type: string
          example: ""
        created_at:
          $ref: '#/components/schemas/unix_timestamp'
        likes_count:
          type: integer
          example: 5
          enum:
            - 0
            - 51
        is_liked:
          type: boolean
          example: true
          enum:
            - false
            - true
        comments_count:
          type: integer
          example: 2
          enum:
            - 0
            - 54
        url:
          type: string
          example: 'https://blockster.com/post/333'
        attachments:
          type: array
          items:
            type: object
            required:
              - post_text
              - post_privacy
            properties:
              url:
                type: string
                example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/files/pvN6N4d9P1shu9NbyMOtTc3SRUgSZraV.jpg"
              with:
                type: integer
                example: 240
                enum:
                  - 240
                  - null
              height:
                type: integer
                example: 250
                enum:
                  - 240
                  - null
              mime_type:
                type: string
                example: "image/jpeg"
                enum:
                  - "image/jpeg"
                  - "image/png"
                  - "image/gif"
                  - "application/zip"
        service_gif:
          type: object
          properties:
            url:
              type: string
              example: "https://media2.giphy.com/media/VVh7txo37uooM/200.gif?cid=b4114d90ym4bbif3jg0ylslhb981r87d914wnlvhv9np4atd&rid=200.gif&ct=g"
            with:
              type: integer
              example: 267
            height:
              type: integer
              example: 200
            mime_type:
              type: string
              example: "image/gif"
          nullable: true
        owner:
          $ref: '#/components/schemas/PostOwner'
        comments_status:
          type: boolean
          example: true
        parent:
          type: string
          example: null

    PopularUsersResponse:
      description: Successful auth response
      type: array
      items:
        $ref: '#/components/schemas/UserModel'
    FollowUserResponse:
      description: Successful follow response
      type: object
      properties:
        message:
          type: object
          example: 'Followed|Unfollowed'
    ListChatsResponse:
      description: Successful auth response
      type: array
      items:
        $ref: '#/components/schemas/ChatModel'
    PaginateChatsResponse:
      description: Chats response
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChatModel'
        path:
          type: string
          example: "http://127.0.0.1:8082/v1/groups"
        per_page:
          type: integer
          example: 15
        next_page_url:
          type: string
          example: "http://127.0.0.1:8082/v1/group/joined/1?cursor=eyJXb19Hcm91cF9NZW1iZXJzLmlkIjozLCJfcG9pbnRzVG9OZXh0SXRlbXMiOmZhbHNlfQ"
        prev_page_url:
          type: string
          example: "http://127.0.0.1:8082/v1/group/joined/1?cursor=eyJXb19Hcm91cF9NZW1iZXJzLmlkIjozLCJfcG9pbnRzVG9OZXh0SXRlbXMiOmZhbHNlfQ"

    CreateChatResponse:
      description: Successful auth response
      type: object
      properties:
        chat_id:
          format: int32
          type: integer
          example: 123
    GetSingleChatResponse:
      $ref: '#/components/schemas/ChatModel'
    UpdateChatResponse:
      $ref: '#/components/schemas/ChatModel'

    DeleteChatResponse:
      description: Successful auth response
      type: object
      properties:
        status:
          type: boolean
          example: true
    InviteUserToChatResponse:
      description: Successful auth response
      type: object
      properties:
        status:
          type: boolean
          example: true
    KickUserFromChatResponse:
      description: Successful auth response
      type: object
      properties:
        status:
          type: boolean
          example: true
    BanUserFromChatResponse:
      description: Successful auth response
      type: object
      properties:
        status:
          type: boolean
          example: true
    HealthCheckResponse:
      description: Successful auth response
      type: object
      properties:
        status:
          type: boolean
          example: true

    MessageResponse:
      description: This is schema message Response
      type: object
      properties:
        id:
          type: integer
          example: 12
        from:
          $ref: '#/components/schemas/UserModel'
        to:
          $ref: '#/components/schemas/UserModel'
        replies:
          type: array
          items:
            $ref: '#/components/responses/MessageResponse'
        replied:
          $ref: '#/components/schemas/MessageResponse'
        text:
          type: string
          example: This is example message
        media:
          type: string
          example: upload/files/4sHEeiQeUnBuRh1K6YItY4VtJPaZU2wv.jpg
        mediaFileName:
          type: string
          example: hereOriginalFileName.jpg
        time:
          $ref: '#/components/schemas/unix_timestamp'
        unread_msgs:
          type: integer
          example: 6
        seen:
          $ref: '#/components/schemas/unix_timestamp'

    MessageCreatedResponse:
      description: This is schema message Response
      type: object
      properties:
        id:
          type: integer
          example: 12
        from:
          $ref: '#/components/schemas/UserModel'
        to:
          $ref: '#/components/schemas/UserModel'
        text:
          type: string
          example: This is example message
        media:
          type: string
          example: upload/files/4sHEeiQeUnBuRh1K6YItY4VtJPaZU2wv.jpg
        mediaFileName:
          type: string
          example: hereOriginalFileName.jpg
        time:
          $ref: '#/components/schemas/unix_timestamp'
        seen:
          $ref: '#/components/schemas/unix_timestamp'

    MessagesResponse:
      description: This is schema message Response
      type: array
      items:
        $ref: '#/components/schemas/MessageResponse'

    MessagesCreatedResponse:
      description: This is schema message created Response
      type: array
      items:
        $ref: '#/components/schemas/MessageCreatedResponse'

    GroupChatMessage:
      description: This is schema group chat message
      type: object
      properties:
        id:
          type: integer
          example: 393

        from:
          $ref: '#/components/schemas/UserModel'

        group_id:
          type: integer
          example: 35

        text:
          type: string
          example: "This is group message timed aaa with media"

        media:
          type: string
          example: "upload/files/wUTb1OP3IiGml0hTYYtwYlZDQtoxJpqC.jpg"

        mediaFileName:
          type: string
          example: "af2ff8dc5aee4ef2cb7bb4421b63e702.jpg"

        time:
          $ref: '#/components/schemas/unix_timestamp'

        seen:
          $ref: '#/components/schemas/unix_timestamp'

    GroupChatList:
      description: This is group chat list
      type: object
      properties:
        group_id:
          type: integer
          example: 53

        user_id:
          type: integer
          example: 1748

        group_slug:
          type: string
          example: "This is group Name name name ka ka ka cc c c2"

        avatar:
          type: string
          example: "upload/photos/d-group.jpg"

        active:
          type: string
          example: null

        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageCreatedResponse'

        users:
          type: array
          items:
            $ref: '#/components/schemas/UserModel'

        time:
          $ref: '#/components/schemas/unix_timestamp'

        group_public_id:
          type: string
          example: "-1"

    PostCommentResource:
      type: object
      properties:
        id:
          type: integer
          example: 479
        post_id:
          type: integer
          example: 485
        text:
          type: string
          example: "This is text"
        file:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/files/FVfzB135RNqqkZvz2AiltkgDfzVK8Xf4.jpg"
        created_at:
          type: integer
          example: 1631788937
        likes_count:
          type: integer
          example: 465
          enum:
            - 0
            - 9
            - 16
        replies_count:
          type: integer
          example: 8
          enum:
            - 0
            - 8
            - 10
        is_liked:
          type: boolean
          example: true
          enum:
            - true
            - false
        owner:
          $ref: '#/components/schemas/PostCommentOwnerResource'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/PostCommentReplyResource'


    PostCommentReplyResource:
      type: object
      properties:
        id:
          type: integer
          example: 479
        comment_id:
          type: integer
          example: 485
        text:
          type: string
          example: "This is text This is text This is text"
        file:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/comment/photos/FVfzB135RNqqkZvz2AiltkgDfzVK8Xf4.jpg"
          enum:
            - null
            - "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/comment/photos/FVfzB135RNqqkZvz2AiltkgDfzVK8Xf4.jpg"
        created_at:
          type: string
          example: "2020-04-02 14:22:21"
        likes_count:
          type: integer
          example: 465
          enum:
            - 0
            - 9
            - 16
        is_liked:
          type: boolean
          example: true
          enum:
            - true
            - false
#        replies_count:
#          type: integer
#          example: 8
#          enum:
#            - 0
#            - 8
#            - 10
        owner:
          $ref: '#/components/schemas/PostCommentOwnerResource'

    PostCommentOwnerResource:
      type: object
      properties:
        user_id:
          type: integer
          example: 64
        username:
          type: string
          example: "Testввв_Testov40"
        first_name:
          type: string
          example: "Testввв"
        last_name:
          type: string
          example: "Testov"
        avatar:
          type: string
          example: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/photos/3l6IG4BKbbHceRzgiTrlEIaNUbyfu2NW.jpg"

    BaseCursorPaginationSchema:
      description: Cursor Pagination schema
      type: object
      properties:
        path:
          type: string
          example: "http://127.0.0.1:8082/v1/groups"
        per_page:
          type: integer
          example: 15
          default: 25
        next_page_url:
          type: string
          example: "http://127.0.0.1:8082/v1/group/joined/1?cursor=eyJXb19Hcm91cF9NZW1iZXJzLmlkIjozLCJfcG9pbnRzVG9OZXh0SXRlbXMiOmZhbHNlfQ"
        prev_page_url:
          type: string
          example: "http://127.0.0.1:8082/v1/group/joined/1?cursor=eyJXb19Hcm91cF9NZW1iZXJzLmlkIjozLCJfcG9pbnRzVG9OZXh0SXRlbXMiOmZhbHNlfQ"

    BaseProjectCursorPaginationSchema:
      description: Project Cursor Pagination schema
      type: object
      properties:
        data:
          type: array
        path:
          type: string
          example: "https://api-dev.blockster.com/v1/feed"
        items_count:
          type: integer
          example: 12
          enum:
            - 0
            - null
        per_page:
          type: integer
          example: 15
          default: 25
        next_page_url:
          type: string
          example: "https://api-dev.blockster.com/v1/feed?per_page=15&cursor_page=3"
          nullable: true
        prev_page_url:
          type: string
          example: "https://api-dev.blockster.com/v1/feed?per_page=15&cursor_page=1"
          nullable: true
        cursor_page:
          type: indeter
          example: 2
        next_page:
          type: integer
          example: 3
          nullable: true
        prev_page:
          type: integer
          example: 1
          nullable: true
        after:
          type: integer
          example: 10
          nullable: true
        before:
          type: integer
          example: 20
          nullable: true

    GroupsCursorPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/GroupResource'

    GroupsSearchCursorPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/GroupSearchResource'

    GroupsSuggestionCursorPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/GroupSuggestionResource'

    GroupJoinedCursorPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/GroupJoinedResource'

    PostCommentsCursorPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/PostCommentResource'

    UsersCursorPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/UserModel'

    PostsCursorPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/PostResource'

    LocationSchema:
      description: 'Google Places API location schema.'
      type: 'object'
      properties:
        html_attributions:
          type: 'array'
        results:
          type: 'array'
        status:
          type: 'string'

    CommentRepliesSchema:
      description: 'List of a comment replies schema.'
      allOf:
        - $ref: '#/components/schemas/BaseCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/CommentReplySchema'

    CommentReplySchema:
      description: 'A comment reply schema.'
      type: 'object'
      properties:
        id:
          type: 'integer'
          example: 111
        comment_id:
          type: 'integer'
          example: 222
        page_id:
          type: 'integer'
          example: 444
        text:
          type: 'string'
          nullable: true
          example: 'My test comment 123.'
        c_file:
          type: 'string'
          nullable: true
          example: 'https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/files/FVfzB135RNqqkZvz2AiltkgDfzVK8Xf4.jpg'
        time:
          type: 'integer'
          nullable: true
          example: 1111111111
        deleted_at:
          type: 'integer'
          nullable: true
          example: 2222222222
        edited:
          type: 'integer'
          nullable: true
          example: 3333333333
        likes_count:
          type: 'integer'
          example: 10
        owner:
          type: 'object'
          properties:
            user_id:
              type: 'integer'
              example: 111
            username:
              type: 'string'
              example: 'JohnDoe123'
            first_name:
              type: 'string'
              example: 'John'
            last_name:
              type: 'string'
              example: 'Doe'
            avatar:
              type: 'string'
              nullable: true
              example: 'https://dgtx-sn-blockster.s3.amazonaws.com/upload/photos/2021/10/togxyLHdTgDj8ia9BUSF_21_07927fb5bed8512030811c84daf11a24_image.jpg'

    BlockdeskBlocksResponseSchema:
      description: "The schema of list of the Blockdesk blocks' articles."
      type: 'array'
      items:
        $ref: '#/components/schemas/BlockdeskBlocksArticleSchema'

    BlockdeskArticleCategoryTitleSchema:
      description: 'The schema of the Blockdesk article category title.'
      type: 'object'
      properties:
        lang_key:
          type: 'integer'
          example: 333
        english:
          type: 'string'
          nullable: true
          example: 'My Test Blockdesk Category 123'
        french:
          type: 'string'
          nullable: true
          example: 'My Test Blockdesk Category 123'
        german:
          type: 'string'
          nullable: true
          example: 'My Test Blockdesk Category 123'
        italian:
          type: 'string'
          nullable: true
          example: 'My Test Blockdesk Category 123'
        portuguese:
          type: 'string'
          nullable: true
          example: 'My Test Blockdesk Category 123'
        russian:
          type: 'string'
          nullable: true
          example: 'My Test Blockdesk Category 123'
        spanish:
          type: 'string'
          nullable: true
          example: 'My Test Blockdesk Category 123'

    BlockdeskArticleCategorySchema:
      description: 'The schema of the Blockdesk article category.'
      type: 'object'
      properties:
        id:
          type: 'integer'
          example: 19
        name:
          type: string
          example: "Blockchain"

    BlockdeskArticleOwnerSchema:
      description: 'The schema of the Blockdesk article owner.'
      type: 'object'
      properties:
        user_id:
          type: 'integer'
          example: 444
        first_name:
          type: 'string'
          example: 'John'
        last_name:
          type: 'string'
          example: 'Doe'
        avatar:
          type: 'string'
          nullable: true
          example: 'https://dgtx-sn-blockster.s3.amazonaws.com/upload/photos/2021/03/ZGHD9HPNcT4BroAxj1ij_29_58ea77e448133f004a6bf37f9fe9b48d_avatar.png'
        is_followed:
          type: boolean
          example: false
          enum:
            - true
            - false

    BlockdeskBlocksArticleSchema:
      description: "The schema of article of the get Blockdesk blocks."
      type: 'object'
      properties:
        id:
          type: 'integer'
          example: 111
        title:
          type: 'string'
          example: 'My Test Blockdesk Article 123'
        category:
          type: object
          properties:
            id:
              type: integer
              example: 19
            name:
              type: string
              example: "Blockchain"
        thumbnail:
          type: 'string'
          example: 'https://dgtx-sn-blockster.s3.amazonaws.com/upload/photos/2021/10/togxyLHdTgDj8ia9BUSF_21_07927fb5bed8512030811c84daf11a24_image.jpg'
        created_at:
          type: 'integer'
          example: 1631284911
        view:
          type: 'integer'
          example: 10
        is_saved:
          type: 'boolean'
          example: true
        owner:
          $ref: '#/components/schemas/BlockdeskArticleOwnerSchema'

    ToggleLikeResponseSchema:
      description: 'The schema of toggle like response.'
      type: 'object'
      properties:
        message:
          type: 'string'
          enum:
            - 'Liked'
            - 'Unliked'
        likes_count:
          type: 'integer'
          example: 10

    BlockdeskArticleResponseSchema:
      description: 'The schema of the Blockdesk article.'
      type: 'array'
      items:
        $ref: '#/components/schemas/BlockdeskArticleSchema'

    BlockdeskArticleSchema:
      description: 'The schema of the Blockdesk article.'
      type: 'object'
      properties:
        id:
          type: 'integer'
          example: 111
        title:
          type: 'string'
          example: 'My Test Blockdesk Article 123'
        json_content:
          type: 'string'
          nullable: true
          example: '{"time":1631612946874,"blocks":[{"id":"Q4FfShigHo","type":"paragraph","data":{"text":"Test content"},"tunes":{"tune":{"alignment":"left"}}}],"version":"2.22.0"}'
        description:
          type: 'string'
          example: 'My Test Blockdesk Article Description 123'
        category:
          $ref: '#/components/schemas/BlockdeskArticleCategorySchema'
        thumbnail:
          type: 'string'
          example: 'https://dgtx-sn-blockster.s3.amazonaws.com/upload/photos/2021/10/togxyLHdTgDj8ia9BUSF_21_07927fb5bed8512030811c84daf11a24_image.jpg'
        posted:
          type: 'integer'
          example: 1631284911
        view:
          type: 'integer'
          example: 10
        tags:
          type: 'array'
          items:
            type: 'string'
            example: 'hello'
        comments_count:
          type: 'integer'
          example: 10
        likes_count:
          type: 'integer'
          example: 5
        is_article_author:
          type: boolean
          example: false
        is_saved:
          type: 'boolean'
          example: true
        is_liked:
          type: 'boolean'
          example: true
        url:
          type: 'string'
          example: 'https://dev.blockster.com/blockdesk/111_my-test-blockdesk-article-123'
        owner:
          allOf:
            - $ref: '#/components/schemas/BlockdeskArticleOwnerSchema'
            - type: 'object'
              properties:
                birthday:
                  type: 'string'
                  example: '1990-01-01'
                address:
                  type: 'string'
                  example: 'Ukraine'
                articles_count:
                  type: 'integer'
                  example: 10
                role:
                  type: string
                  example: 'article_author'
                is_followed:
                  type: 'boolean'
                  example: true
                position:
                  type: 'string'
                  example: 'CEO'

    BlockdeskArticleFollowingResponseSchema:
      description: 'The schema of the Blockdesk article.'
      type: 'array'
      items:
        $ref: '#/components/schemas/BlockdeskArticleFollowingPaginationSchema'

    PostCommentReportResponseSchema:
      description: 'The schema of the report post comment response.'
      type: 'object'
      properties:
        message:
          type: string
          example: 'Reported'

    PostCommentReportWithdrawResponseSchema:
      description: 'The schema of the withdraw post comment report response.'
      type: 'object'
      properties:
        message:
          type: string
          example: 'Report withdrawn'

    BlockdeskMyArticlesResponseSchema:
      description: 'The schema of the get Blockdesk My Articles tab articles response.'
      allOf:
        - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
        - type: 'object'
          properties:
            data:
              type: 'array'
              items:
                $ref: '#/components/schemas/BlockdeskMyArticlesArticleSchema'

    BlockdeskMyArticlesArticleSchema:
      description: 'The schema of the get Blockdesk My Articles tab article.'
      type: 'object'
      properties:
        id:
          type: 'integer'
          example: 111
        title:
          type: 'string'
          example: 'My Article Title 123'
        category:
          $ref: '#/components/schemas/BlockdeskArticleCategorySchema'
        thumbnail:
          type: 'integer'
          nullable: false
          example: 'https://dgtx-sn-blockster.s3.amazonaws.com/upload/photos/2021/10/togxyLHdTgDj8ia9BUSF_21_07927fb5bed8512030811c84daf11a24_image.jpg'
        created_at:
          type: 'integer'
          example: 1631284911
        is_saved:
          type: 'boolean'
          example: true
        owner:
          type: 'object'
          properties:
            user_id:
              type: 'integer'
              example: 111
            first_name:
              type: 'string'
              example: 'John'
            last_name:
              type: 'string'
              example: 'Doe'
            avatar:
              type: 'string'
              nullable: true
              example: 'https://dgtx-sn-blockster.s3.amazonaws.com/upload/photos/2021/10/togxyLHdTgDj8ia9BUSF_21_07927fb5bed8512030811c84daf11a24_image.jpg'
            is_followed:
              type: 'boolean'
              example: true

    BlockdeskArticleCommentReportResponseSchema:
      description: 'The schema of the report Blockdesk article comment response.'
      type: 'object'
      properties:
        message:
          type: string
          example: 'Reported'

    BlockdeskArticleCommentReportWithdrawResponseSchema:
      description: 'The schema of the withdraw Blockdesk article comment report response.'
      type: 'object'
      properties:
        message:
          type: string
          example: 'Report withdrawn'

    TopTagSchema:
      description: 'The schema of the top hashtag.'
      type: 'string'
      example: '#hashtag'

    HotTodayTagSchema:
      description: 'The schema of the top hashtag.'
      type: 'object'
      properties:
        id:
          type: 'integer'
          example: 123
        hash:
          type: 'string'
          example: '2b452c50d7c60fb1974ac813f3c6f2hh'
        tag:
          type: 'string'
          example: 'hashtag'
        deleted_at:
          type: 'integer'
          nullable: true
          example: 1526247405
        created_at:
          type: 'integer'
          example: 1526247400
        updated_at:
          type: 'integer'
          example: 1526247403
        popularity_today_count:
          type: 'integer'
          example: 10

    IsFriendPropertySchema:
      type: 'string'
      enum:
        - 'following'
        - 'requested'
        - 'follow'

    FollowingRequestUserSchema:
      type: object
      properties:
        user_id:
          type: integer
          example: 123
        username:
          type: string
          example: Nikname
        email:
          type: string
          example: email@example.com
        first_name:
          type: string
          example: 'Joe'
        last_name:
          type: string
          example: 'Doe'
        avatar:
          type: string
          example: '/upload/photos/2021/03/UWBU9HPNcT4BroAxj1ij_29_58ea77e448133f004a6bf37f9fe9b48d_avatar.png'
        is_friend:
          $ref: '#/components/schemas/IsFriendPropertySchema'
        created_at:
          type: integer
          nullable: true
          example: 1640248983

    FollowingRequestsCursorPaginationSchema:
      allOf:
        - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/FollowingRequestUserSchema'
            requests_count:
              type: integer
              example: 10

    UserFollowDiscoverSchema:
      type: 'object'
      properties:
        user_id:
          type: 'integer'
          example: 123
        first_name:
          type: 'string'
          example: 'John'
        last_name:
          type: 'string'
          example: 'Doe'
        avatar:
          type: 'string'
          nullable: true
          example: '/upload/photos/2021/03/UWBU9HPNcT4BroAxj1ij_29_58ea77e448133f004a6bf37f9fe9b48d_avatar.png'
        is_friend:
          $ref: '#/components/schemas/IsFriendPropertySchema'
        field:
          $ref: '#/components/schemas/UserFields'

    PostReportResponseSchema:
      description: 'The schema of the report post response.'
      type: 'object'
      properties:
        message:
          type: 'string'
          example: 'Reported'

    PostReportWithdrawResponseSchema:
      description: 'The schema of the withdraw post report response.'
      type: 'object'
      properties:
        message:
          type: 'string'
          example: 'Report withdrawn'

    UsersMeNotificationsSettingsResponseSchema:
      description: 'The schema of the the current user notifications settings response.'
      type: 'object'
      properties:
        allow:
          type: 'string'
          example: 'yes'
        from:
          type: 'string'
          example: 'everyone'
        sounds:
          type: 'string'
          example: 'on'


  responses:
    BlockdeskSearchPaginateResponse:
      description: Blockdesk Search Paginate Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockdeskSearchPaginateSchema'

    SavedArticlesPaginateResponse:
      description: Get Saved Articles Paginate
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SavedArticleSchema'




    BlockdeskCommentReplyResponse:
      description: Blockdesk Comment Reply
      content:
        applicatin/json:
          schema:
            $ref: '#/components/schemas/BlockdeskCommentReplySchema'

    BlockdeskCommentReplyPaginationResponse:
      description: Blockdesk Comment Reply Pagination
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockdeskCommentReplyPaginationSchema'

    BlockdeskCommentResponse:
      description: Blockdesk Comment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockdeskCommentSchema'

    BlockdeskCommentPaginationResponse:
      description: Blockdesk Comment Pagination
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockdeskCommentPaginationSchema'

    CountryListResponse:
      description: Successful auth response
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Country'

    CountryResponse:
      description: Successful auth response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Country'

    UserMeResponse:
      description: User me
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserMeSchema'

    UserMePrivacyResponse:
      description: User me
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserMePrivacySchema'

    UserMeUpdateResponse:
      description: User me
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserMeUpdatedSchema'

    serMePrivacyUpdateResponse:
      description: User me privacy
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserMeSchema'


    GroupAdminPermissionResponse:
      description: Group Admin Permission Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupAdminPermissionResource'

    FollowCursorPaginate:
      description: Result follows
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FollowCursorPaginateSchema'


    GroupMemberCursorPaginateResponse:
      description: Group Member Cursor Paginate Schema Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupMemberCursorPaginateSchema'

    UserCreatedGroupCursorPaginateResponse:
      description: User Created Group Cursor Paginate
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserCreatedGroupCursorPaginateSchema'
    PostCommentCaruselPaginateResponse:
      description: Post Comment Carusel Paginate Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostCommentResource'

    BadRequestErrorResponse:
      content:
        application/json:
          example:
            message: Params missing or invalid credentials
            error_code: -1400
      description: Params missing or invalid credentials

    GroupJoinPaginateResponse:
      description: Group Join Paginate Response
      content:
        application/json:
          schema:
            $ref: '#/components/responses/GroupsCursorPaginationResponse'
    PostsResponse:
      description: Posts Response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PostResource'

    PostResponse:
      description: Post Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostResource'

    NoContentResponse:
      description: No Content Response

    GroupAdminCursorPaginateSchema:
      description: Group Admin Response
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  admins_count:
                    type: integer
                    example: 1
                    enum:
                      - 0
                      - 1
                      - 100
              - $ref: '#/components/schemas/BaseCursorPaginationSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupAdminResource'
    GroupAdminResponse:
      description: User Admin Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupAdminResource'
    UnauthorizedErrorResponse:
      content:
        application/json:
          example:
            message: Unauthorized
            error_code: -1401
      description: Access token is missing or invalid
    ForbiddenErrorResponse:
      content:
        application/json:
          example:
            message: Some error message of forbidden content
            error_code: -1403
      description: Forbidden action for this user
    MethodNotAllowedHttpResponse:
      content:
        application/json:
          example:
            message: Method not allowed
            error_code: -1405
      description: Method not allowed error
    NotFoundErrorResponse:
      content:
        applicaiton/json:
          example:
            message: Resource not found
            error_code: -1404
      description: Response for not found entity

    FeedPostResponse:
      description: Successfull Feed Post response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FeedResource'


    InternalServerErrorResponse:
      content:
        applicaiton/json:
          example:
            error: Internal server error
      description: Server error response
    MessageResponse:
      description: Message Response
      content:
        application/json:
          example:
            type: object
            properties:
              id:
                type: integer
                example: 12
              from:
                schema:
                  $ref: '#/components/schemas/UserModel'
              to:
                $ref: '#/components/schemas/UserModel'
              text:
                type: string
                example: This is example message
              media:
                type: string
                example: upload/files/4sHEeiQeUnBuRh1K6YItY4VtJPaZU2wv.jpg
              mediaFileName:
                type: string
                example: hereOriginalFileName.jpg
              seen:
                $ref: '#/components/schemas/unix_timestamp'

    GroupCategoriesListResourceResponse:
      description: This is schema Group Categories List Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupCategoryResourceList'
    ArticleCategoriesListResourceResponse:
      description: This is schema Article Categories List Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArticleCategoryResourceList'
    UserModelResponse:
      description: This is schema User Model Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserModel'
    AuthSuccessResponse:
      description: Successful auth response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthSuccessResponse'
    OperationSuccessfulResponse:
      description: Successful Operation response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationSuccessfulResponse'
    GenerateRestorePasswordResponse:
      description: Successful auth response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenerateRestorePasswordResponse'
    SubmitRestorePasswordResponse:
      description: Successful auth response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubmitRestorePasswordResponse'

    CheckEmailResponse:
      description: Successful email check response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckEmailResponse'

    PopularUsersResponse:
      description: Successful users list sorted by popularity response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PopularUsersResponse'
    OperationSuccessfulWithoutBodyResponse:
      description: Successful operation
    UserIsAlreadyActiveResponse:
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "User is already active"
              error_code:
                type: number
                example: -1202
      description: User is already active

    GroupsCursorPaginationResponse:
      description: Groups Cursor Pagination response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupsCursorPaginationSchema'

    GroupsSearchCursorPaginationResponse:
      description: Groups Cursor Pagination response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupsSearchCursorPaginationSchema'

    GroupsSuggestionsCursorPaginationResponse:
      description: Groups Cursor Pagination response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupsSuggestionCursorPaginationSchema'

    GroupsJoinedCursorPaginationResponse:
      description: Groups Cursor Pagination response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupJoinedCursorPaginationSchema'

    GroupMemberRequestResponse:
      description: Group Member Request Resonse
      content:
        application/json:
          schema:
            allOf:
              - type: object
                properties:
                  request_members_count:
                    type: integer
                    example: 51
                    enum:
                      - 0
                      - 1
                      - 19
              - $ref: '#/components/schemas/BaseCursorPaginationSchema'
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupRequestMemberResource'

    GroupMemberRequestActionResponse:
      description: Group Member Request Resonse
      content:
        application/json:
          schema:
           $ref: '#/components/schemas/GroupRequestMemberActionResource'

    UsersCursorPaginationResponse:
      description: Users Cursor Pagination response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsersCursorPaginationSchema'

    PostsCursorPaginationResponse:
      description: Posts Cursor Pagination response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostsCursorPaginationSchema'

    PostCommentResponse:
      description: Show Post Comment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostCommentResource'

    PostCommentCursorPaginationResponse:
      description: Post Comments Cursor Pagination response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostCommentsCursorPaginationSchema'

    PaginateChatsResponse:
      description: Chats Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaginateChatsResponse'

    FollowersCursorPaginationResponse:
      description: 'Users who follows the requested user Cursor Pagination response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FollowersCursorPaginationSchema'

    FollowSearchCursorPaginationResponse:
      description: 'Users who follows the requested user Cursor Pagination response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FollowersSearchCursorPaginationSchema'

    FollowedCursorPaginationResponse:
      description: 'Users followed by the requested user Cursor Pagination response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FollowedCursorPaginationSchema'

    LocationResponse:
      description: 'Response from Google Places API.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LocationSchema'

    CommentRepliesResponse:
      description: 'List of replies to a comment response.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommentRepliesSchema'

    CommentReplyResponse:
      description: 'Reply to a comment response.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommentReplySchema'

    BlockdeskBlocksResponse:
      description: "The response to the get Blockdesk blocks' articles requests."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockdeskBlocksResponseSchema'

    ToggleLikeResponse:
      description: 'Toggle message and likes count.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ToggleLikeResponseSchema'

    BlockdeskBlocksPaginatedResponse:
      description: "The paginated response to the get Blockdesk blocks' articles requests."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/BlockdeskBlocksResponseSchema'

    BlockdeskArticleResponse:
      description: 'The response to the get Blockdesk article request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockdeskArticleResponseSchema'

    BlockdeskArticleFollowingResponse:
      description: 'The response to the get Blockdesk article following request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockdeskArticleFollowingResponseSchema'

    PostCommentReportResponse:
      description: 'The response to the report post comment request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostCommentReportResponseSchema'

    PostCommentReportWithdrawResponse:
      description: 'The response to the withdraw post comment report request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostCommentReportWithdrawResponseSchema'

    BlockdeskMyArticlesResponse:
      description: 'The response to the get Blockdesk My Articles tab articles request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockdeskMyArticlesResponseSchema'

    BlockdeskArticleCommentReportResponse:
      description: 'The response to the report Blockdesk article comment request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockdeskArticleCommentReportResponseSchema'

    BlockdeskArticleCommentReportWithdrawResponse:
      description: 'The response to the withdraw Blockdesk article comment report request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlockdeskArticleCommentReportWithdrawResponseSchema'

    BlockdeskArticleShareUrlResponse:
      description: 'The response to the get Blockdesk article share url request.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              url:
                type: 'string'
                example: 'https://dev.blockster.com/blockdesk/24_test-title'

    PostPinToggleResponse:
      description: 'The response to the toggle post pin request.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              message:
                type: 'string'
                enum:
                  - 'Pinned'
                  - 'Unpinned'
                  -
    PostLinkResponse:
      description: 'The response to the toggle post pin request.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              url:
                type: string
                example: 'https://blockster.com/post/30'

    TopTagsList:
      description: 'The response to the get top tags list request.'
      content:
        application/json:
          schema:
            type: 'array'
            items:
              $ref: '#/components/schemas/TopTagSchema'

    TopTagsPosts:
      description: 'The response to the get top tags posts request.'
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
              - type: 'object'
                properties:
                  data:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/PostResource'

    HotTodayTagsList:
      description: 'The response to the get hot today tags list request.'
      content:
        application/json:
          schema:
            type: 'array'
            items:
              $ref: '#/components/schemas/HotTodayTagSchema'

    HotTodayTagsPosts:
      description: 'The response to the get hot today tags posts request.'
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
              - type: 'object'
                properties:
                  data:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/PostResource'

    UserTimelinePosts:
      description: "The response to the get user's timeline posts request."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
              - type: 'object'
                properties:
                  data:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/PostResource'

    SearchUserTimelinePosts:
      description: "The response to the search posts on user's timeline request."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
              - type: 'object'
                properties:
                  data:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/PostResource'


    UserAcceptFollowRequest:
      description: "The response to the accept user's follow request request."
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              message:
                type: 'string'
                enum:
                  - 'Accepted'
                  - 'Not found'

    UserDeclineFollowRequest:
      description: "The response to the decline user's follow request request."
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              message:
                type: 'string'
                enum:
                  - 'Declined'
                  - 'Not found'

    UserTimelinePinnedPosts:
      description: "The response to the get user's timeline pinned posts request."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
              - type: 'object'
                properties:
                  data:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/PostResource'

    FollowingRequestsCursorPaginationResponse:
      description: 'Following requests cursor pagination response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FollowingRequestsCursorPaginationSchema'

    SharePostTimelineResponse:
      description: 'The response to the share post to timeline request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostResource'

    UsersFollowDiscoverResponse:
      description: "The response to the get user's follow recommendations request."
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseProjectCursorPaginationSchema'
              - type: 'object'
                properties:
                  data:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/UserFollowDiscoverSchema'

    PasswordChangeResponse:
      description: 'The response to the password change request.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              message:
                type: 'string'
                default: 'Verification code sent! Please verify your request.'

    VerifyPasswordChangeResponse:
      description: 'The response to the verify password change request.'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              message:
                type: 'string'
                default: 'Password successfully changed.'

    PostReportResponse:
      description: 'The response to the report post request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostReportResponseSchema'

    PostReportWithdrawResponse:
      description: 'The response to the withdraw post report request.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostReportWithdrawResponseSchema'

    UsersMeNotificationsSettingsResponse:
      description: 'The response to the current user notifications settings requests.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsersMeNotificationsSettingsResponseSchema'


  examples:
    UserExample:
      value:
        user_id: 1
        username: administrator
        email: bpetrovic@digitexfutures.com
        password: $2y$10$jM27xxGTPO6NWuRRwy5zXOqxdSBed2x9Z2t8y/AyiC4cZvuJ.DlFO
        first_name: Mr
        last_name: Johns
        avatar: upload/photos/d-avatar.svg
        cover: upload/photos/d-cover.jpg
        background_image: ''
        background_image_status: '0'
        relationship_id: 0
        address: Belgrade
        working: Digitex
        working_link: ''
        about: hhhhhhhhhhh
        school: ''
        gender: male
        birthday: 00-00-0000
        country_id: 0
        website: 'https://www.google.com'
        facebook: ''
        google: ''
        twitter: ''
        linkedin: ''
        youtube: ''
        vk: ''
        instagram: ''
        language: english
        email_code: '465139'
        src: Undefined
        ip_address: '::1'
        follow_privacy: '0'
        friend_privacy: '0'
        post_privacy: ifollow
        message_privacy: '0'
        confirm_followers: '1'
        show_activities_privacy: '1'
        birth_privacy: '0'
        visit_privacy: '0'
        verified: '1'
        lastseen: 1618079878
        showlastseen: '0'
        emailNotification: '1'
        e_liked: '1'
        e_wondered: '1'
        e_shared: '1'
        e_followed: '1'
        e_commented: '1'
        e_visited: '1'
        e_liked_page: '1'
        e_mentioned: '1'
        e_joined_group: '1'
        e_accepted: '1'
        e_profile_wall_post: '1'
        e_sentme_msg: '0'
        e_last_notif: '0'
        notification_settings: >-
          {"e_liked":1,"e_shared":0,"e_wondered":0,"e_commented":1,"e_followed":1,"e_accepted":1,"e_mentioned":0,"e_joined_group":1,"e_liked_page":1,"e_visited":1,"e_profile_wall_post":1,"e_memory":1}
        status: '0'
        active: '1'
        admin: '1'
        type: user
        registered: 00/0000
        start_up: '1'
        start_up_info: '1'
        startup_follow: '1'
        startup_image: '1'
        last_email_sent: 0
        phone_number: ''
        sms_code: 0
        is_pro: '0'
        pro_time: 0
        pro_type: '0'
        joined: 1585831903
        css_file: ''
        timezone: UTC
        referrer: 35
        ref_user_id: 0
        balance: '2.8571428571428'
        paypal_email: ''
        notifications_sound: '1'
        order_posts_by: '0'
        social_login: '0'
        android_m_device_id: ''
        ios_m_device_id: ''
        android_n_device_id: ''
        ios_n_device_id: ''
        web_device_id: ''
        wallet: '4601.9'
        lat: '44.8145593'
        lng: '20.4537561'
        last_location_update: '1594511455'
        share_my_location: 1
        last_data_update: 1618223957
        details: >-
          {"post_count":"56","album_count":"5","following_count":"3","followers_count":"3","groups_count":"7","likes_count":"2","mutual_friends_count":1}
        sidebar_data: >-
          {"following_data":["12","4","3"],"followers_data":["35","12","5"],"likes_data":["49","3"],"groups_data":["1","3","4","5","12","13","18"],"mutual_friends_data":["3"]}
        last_avatar_mod: 0
        last_cover_mod: 0
        points: 60
        daily_points: 60
        point_day_expire: '1617839940'
        last_follow_id: 0
        share_my_data: 1
        two_factor: 0
        new_email: ''
        two_factor_verified: 0
        new_phone: ''
        info_file: ''
        city: ''
        state: ''
        zip: ''
        school_completed: 0
        weather_unit: us
        paystack_ref: ''
    ChatExample:
      value:
        group_id: 123
        user_id: 321
        group_slug: "SomeChatNamae"
        avatar: "https://dgtx-darknet-blockster.s3.eu-west-1.amazonaws.com/upload/avatar/someimage.jpg"
        time: 3214112414
        users:
          user_id: 123
        admins:
          user_id: 123

  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
    BearerAuth:
      scheme: bearer
      bearerFormat: JWT
      type: http
security:
  - {}

<?php

declare(strict_types=1);

namespace App\Models;

use App\Collections\CommentReplyCollection;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

/**
 * App\Models\CommentReply
 *
 * @property int $id
 * @property int $comment_id
 * @property int $user_id
 * @property int $page_id
 * @property string|null $text
 * @property string $c_file
 * @property string $time
 * @property-read \App\Models\Comment $comment
 * @property-read \App\Models\Post $post
 * @property-read \App\Models\User $user
 * @method static \Illuminate\Database\Eloquent\Builder|CommentReply newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|CommentReply newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|CommentReply query()
 * @method static \Illuminate\Database\Eloquent\Builder|CommentReply whereCFile($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CommentReply whereCommentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CommentReply whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CommentReply wherePageId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CommentReply whereText($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CommentReply whereTime($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CommentReply whereUserId($value)
 * @property string|null $deleted_at
 * @property int|null $edited
 * @method static \Illuminate\Database\Eloquent\Builder|CommentReply whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|CommentReply whereEdited($value)
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\User[] $likes
 * @property-read int|null $likes_count
 */
class CommentReply extends Model
{
    use HasFactory;

    public $timestamps = false;

    protected $table = 'Wo_Comment_Replies';

    public const COMMENT_IMAGE_PATH = 'upload/comment/reply/photos';

    protected $fillable = [
        'comment_id',
        'page_id',
        'text',
        'c_file',
        'user_id',
    ];

    protected $perPage = 15;

    /**
     * @var string[] $withCount
     */
    protected $withCount = [
        'reactions',
    ];

    /**
     * @param array $models
     * @return CommentReplyCollection
     */
    public function newCollection(array $models = []): CommentReplyCollection
    {
        return CommentReplyCollection::make($models); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function getCFileAttribute(): ?string
    {
        $url = $this->getRawOriginal('c_file');

        return !empty($url) ? sprintf("%s/{$url}", getenv('AWS_CDN')) : null;
    }

    /**
     * @return BelongsTo
     */
    public function post(): BelongsTo
    {
        return $this->belongsTo(Post::class, 'post_id', 'id');
    }

    /**
     * @return BelongsTo
     */
    public function comment(): BelongsTo
    {
        return $this->belongsTo(Comment::class, 'comment_id', 'id');
    }

    /**
     * @return BelongsTo
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    /**
     * @return BelongsToMany
     */
    public function reactions(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'Wo_Reactions', 'replay_id', 'user_id', 'id', 'user_id');
    }
}

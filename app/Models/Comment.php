<?php

declare(strict_types=1);

namespace App\Models;

use App\Collections\CommentCollection;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;

/**
 * App\Models\Comment
 *
 * @property int $id
 * @property int $user_id
 * @property int $page_id
 * @property int $post_id
 * @property string|null $text
 * @property string $record
 * @property string $c_file
 * @property string $time
 * @property-read \App\Models\Post $post
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\CommentReply[] $replies
 * @property-read int|null $replies_count
 * @property-read \App\Models\User $user
 * @method static \Illuminate\Database\Eloquent\Builder|Comment newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Comment newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Comment query()
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereCFile($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment wherePageId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment wherePostId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereRecord($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereText($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereTime($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereUserId($value)
 * @property string|null $deleted_at
 * @property int|null $edited
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereEdited($value)
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\User[] $likes
 * @property-read int|null $likes_count
 */
class Comment extends Model
{
    use HasFactory;

    public const COMMENT_IMAGE_PATH = 'upload/comment/photos';

    public $timestamps = false;

    public $table = 'Wo_Comments';

    protected $fillable = [
        'user_id',
        'page_id',
        'post_id',
        'text',
        'c_file',
        'time'
    ];

    protected $perPage = 15;

    /**
     * @param array $models
     * @return CommentCollection
     */
    public function newCollection(array $models = []): CommentCollection
    {
        return CommentCollection::make($models); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function getCFileAttribute(): ?string
    {
        $url = $this->getRawOriginal('c_file');

        return !empty($url) ? sprintf("%s/{$url}", getenv('AWS_CDN')) : null;
    }

    /**
     * @return BelongsTo
     */
    public function post(): BelongsTo
    {
        return $this->belongsTo(Post::class, 'post_id', 'post_id');
    }

    /**
     * @return BelongsTo
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    /**
     * @return HasMany
     */
    public function replies(): HasMany
    {
        return $this->hasMany(CommentReply::class, 'comment_id');
    }

    /**
     * @return BelongsToMany
     */
    public function reactions(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'Wo_Reactions', 'comment_id', 'user_id', 'id', 'user_id');
    }

    /**
     * @return BelongsToMany
     */
    public function reports(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'Wo_Reports', 'comment_id', 'user_id', 'id', 'user_id');
    }
}
